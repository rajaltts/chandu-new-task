(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@material-ui/core'), require('@carrier/workflowui-globalfunctions'), require('react-intl'), require('@emotion/core'), require('react-spinners'), require('@material-ui/core/Tooltip'), require('@fortawesome/react-fontawesome'), require('use-onclickoutside'), require('@fortawesome/free-solid-svg-icons'), require('classnames'), require('@carrier/ngecat-unitsconversion'), require('@material-ui/core/Tabs'), require('@material-ui/core/Tab'), require('@material-ui/core/styles'), require('@material-ui/core/TextField'), require('@material-ui/core/Radio'), require('@material-ui/core/FormControlLabel'), require('@material-ui/core/List'), require('lodash/debounce'), require('@material-ui/core/Box'), require('@material-ui/core/ClickAwayListener'), require('@material-ui/core/Grow'), require('@material-ui/core/Paper'), require('@material-ui/core/Popper'), require('@material-ui/core/MenuItem'), require('@material-ui/core/MenuList'), require('@material-ui/icons/ErrorOutline'), require('@material-ui/core/Dialog'), require('@material-ui/core/DialogActions'), require('@material-ui/core/DialogContent'), require('@material-ui/icons/Close'), require('@material-ui/icons'), require('@material-ui/core/Table'), require('@material-ui/core/CircularProgress'), require('@material-ui/core/TableHead'), require('@material-ui/core/TableSortLabel'), require('@material-ui/core/TableRow'), require('@material-ui/core/TableCell'), require('@material-ui/core/Checkbox'), require('@material-ui/icons/ArrowDropDown'), require('@material-ui/core/IconButton'), require('@material-ui/core/TableBody'), require('@material-ui/core/styles/makeStyles'), require('lodash/isPlainObject'), require('react-export-excel-fixed-xlsx'), require('@material-ui/core/Button'), require('@progress/kendo-react-dialogs'), require('@fortawesome/free-regular-svg-icons'), require('react-router-dom'), require('react-redux'), require('react-dom'), require('file-saver'), require('react-spinners/ClipLoader'), require('@material-ui/core/Slide')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@material-ui/core', '@carrier/workflowui-globalfunctions', 'react-intl', '@emotion/core', 'react-spinners', '@material-ui/core/Tooltip', '@fortawesome/react-fontawesome', 'use-onclickoutside', '@fortawesome/free-solid-svg-icons', 'classnames', '@carrier/ngecat-unitsconversion', '@material-ui/core/Tabs', '@material-ui/core/Tab', '@material-ui/core/styles', '@material-ui/core/TextField', '@material-ui/core/Radio', '@material-ui/core/FormControlLabel', '@material-ui/core/List', 'lodash/debounce', '@material-ui/core/Box', '@material-ui/core/ClickAwayListener', '@material-ui/core/Grow', '@material-ui/core/Paper', '@material-ui/core/Popper', '@material-ui/core/MenuItem', '@material-ui/core/MenuList', '@material-ui/icons/ErrorOutline', '@material-ui/core/Dialog', '@material-ui/core/DialogActions', '@material-ui/core/DialogContent', '@material-ui/icons/Close', '@material-ui/icons', '@material-ui/core/Table', '@material-ui/core/CircularProgress', '@material-ui/core/TableHead', '@material-ui/core/TableSortLabel', '@material-ui/core/TableRow', '@material-ui/core/TableCell', '@material-ui/core/Checkbox', '@material-ui/icons/ArrowDropDown', '@material-ui/core/IconButton', '@material-ui/core/TableBody', '@material-ui/core/styles/makeStyles', 'lodash/isPlainObject', 'react-export-excel-fixed-xlsx', '@material-ui/core/Button', '@progress/kendo-react-dialogs', '@fortawesome/free-regular-svg-icons', 'react-router-dom', 'react-redux', 'react-dom', 'file-saver', 'react-spinners/ClipLoader', '@material-ui/core/Slide'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngecat-reactcomponents'] = {}, global.React, global.core$1, global.workflowuiGlobalfunctions, global.reactIntl, global.core, global.reactSpinners, global.Tooltip, global.reactFontawesome, global.useOnClickOutside, global.freeSolidSvgIcons, global.classNames, global.ngecatUnitsconversion, global.Tabs, global.Tab, global.styles, global.TextField, global.Radio, global.FormControlLabel, global.List, global.debounce, global.Box, global.ClickAwayListener, global.Grow, global.Paper, global.Popper, global.MenuItem, global.MenuList, global.ErrorOutlineIcon, global.Dialog, global.DialogActions, global.DialogContent, global.CloseIcon, global.AllIcons, global.Table, global.CircularProgress, global.TableHead, global.TableSortLabel, global.TableRow, global.TableCell, global.Checkbox, global.ArrowDropDownIcon, global.IconButton, global.TableBody, global.makeStyles, global.isPlainObject, global.ReactExport, global.Button$1, global.kendoReactDialogs, global.freeRegularSvgIcons, global.reactRouterDom, global.reactRedux, global.ReactDOM, global.FileSaver, global.ClipLoader, global.Slide));
}(this, (function (exports, React, core$1, workflowuiGlobalfunctions, reactIntl, core, reactSpinners, Tooltip, reactFontawesome, useOnClickOutside, freeSolidSvgIcons, classNames, ngecatUnitsconversion, Tabs, Tab, styles, TextField, Radio, FormControlLabel, List, debounce, Box, ClickAwayListener, Grow, Paper, Popper, MenuItem, MenuList, ErrorOutlineIcon, Dialog, DialogActions, DialogContent, CloseIcon, AllIcons, Table, CircularProgress, TableHead, TableSortLabel, TableRow, TableCell, Checkbox, ArrowDropDownIcon, IconButton, TableBody, makeStyles, isPlainObject, ReactExport, Button$1, kendoReactDialogs, freeRegularSvgIcons, reactRouterDom, reactRedux, ReactDOM, FileSaver, ClipLoader, Slide) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var Tooltip__default = /*#__PURE__*/_interopDefaultLegacy(Tooltip);
  var useOnClickOutside__default = /*#__PURE__*/_interopDefaultLegacy(useOnClickOutside);
  var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
  var Tabs__default = /*#__PURE__*/_interopDefaultLegacy(Tabs);
  var Tab__default = /*#__PURE__*/_interopDefaultLegacy(Tab);
  var TextField__default = /*#__PURE__*/_interopDefaultLegacy(TextField);
  var Radio__default = /*#__PURE__*/_interopDefaultLegacy(Radio);
  var FormControlLabel__default = /*#__PURE__*/_interopDefaultLegacy(FormControlLabel);
  var List__default = /*#__PURE__*/_interopDefaultLegacy(List);
  var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
  var Box__default = /*#__PURE__*/_interopDefaultLegacy(Box);
  var ClickAwayListener__default = /*#__PURE__*/_interopDefaultLegacy(ClickAwayListener);
  var Grow__default = /*#__PURE__*/_interopDefaultLegacy(Grow);
  var Paper__default = /*#__PURE__*/_interopDefaultLegacy(Paper);
  var Popper__default = /*#__PURE__*/_interopDefaultLegacy(Popper);
  var MenuItem__default = /*#__PURE__*/_interopDefaultLegacy(MenuItem);
  var MenuList__default = /*#__PURE__*/_interopDefaultLegacy(MenuList);
  var ErrorOutlineIcon__default = /*#__PURE__*/_interopDefaultLegacy(ErrorOutlineIcon);
  var Dialog__default = /*#__PURE__*/_interopDefaultLegacy(Dialog);
  var DialogActions__default = /*#__PURE__*/_interopDefaultLegacy(DialogActions);
  var DialogContent__default = /*#__PURE__*/_interopDefaultLegacy(DialogContent);
  var CloseIcon__default = /*#__PURE__*/_interopDefaultLegacy(CloseIcon);
  var AllIcons__namespace = /*#__PURE__*/_interopNamespace(AllIcons);
  var Table__default = /*#__PURE__*/_interopDefaultLegacy(Table);
  var CircularProgress__default = /*#__PURE__*/_interopDefaultLegacy(CircularProgress);
  var TableHead__default = /*#__PURE__*/_interopDefaultLegacy(TableHead);
  var TableSortLabel__default = /*#__PURE__*/_interopDefaultLegacy(TableSortLabel);
  var TableRow__default = /*#__PURE__*/_interopDefaultLegacy(TableRow);
  var TableCell__default = /*#__PURE__*/_interopDefaultLegacy(TableCell);
  var Checkbox__default = /*#__PURE__*/_interopDefaultLegacy(Checkbox);
  var ArrowDropDownIcon__default = /*#__PURE__*/_interopDefaultLegacy(ArrowDropDownIcon);
  var IconButton__default = /*#__PURE__*/_interopDefaultLegacy(IconButton);
  var TableBody__default = /*#__PURE__*/_interopDefaultLegacy(TableBody);
  var makeStyles__default = /*#__PURE__*/_interopDefaultLegacy(makeStyles);
  var isPlainObject__default = /*#__PURE__*/_interopDefaultLegacy(isPlainObject);
  var ReactExport__default = /*#__PURE__*/_interopDefaultLegacy(ReactExport);
  var Button__default = /*#__PURE__*/_interopDefaultLegacy(Button$1);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
  var FileSaver__default = /*#__PURE__*/_interopDefaultLegacy(FileSaver);
  var ClipLoader__default = /*#__PURE__*/_interopDefaultLegacy(ClipLoader);
  var Slide__default = /*#__PURE__*/_interopDefaultLegacy(Slide);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".CBWDD-Container {\r\n    overflow: hidden;\r\n}\r\n\r\n.CBWDD-ClickableContainer {\r\n    overflow: hidden;\r\n    padding: 12.5px 20px 12.5px 40px;\r\n    width: calc(100% - 130px);\r\n    float: left;\r\n}\r\n\r\n.CBWDD-ClickableContainer:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.CBWDD-MainContainer {\r\n    overflow: auto;\r\n}\r\n\r\n.CBWDD-Checkbox {\r\n    float: left;\r\n}\r\n\r\n.CBWDD-LabelsContainer{\r\n    float: left;\r\n}\r\n\r\n.CBWDD-OptName{\r\n    display: block;\r\n}\r\n\r\n.CBWDD-InfoIcon {\r\n    height: 30px;\r\n    float: right;\r\n    margin: 21px 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n.CBWDD-CompIcon {\r\n    height: 18px;\r\n    margin: 0px 20px;\r\n    float: left;\r\n}\r\n\r\n.CBWDD-DetailsContainer {\r\n    background-color: #fafafa;\r\n    padding: 20px 10px;\r\n    overflow: hidden;\r\n    box-shadow: 0 8px 6px -6px rgba(41, 41, 41, 0.1) inset,\r\n                0 -8px 6px -6px rgba(41, 41, 41, 0.1) inset;\r\n}\r\n\r\n.CBWDD-Title{\r\n    margin: 10px 60px;\r\n    font-size: 0.95rem;\r\n    display: block;\r\n}\r\n\r\n.CBWDD-Detail{\r\n    font-size: 0.90rem;\r\n    margin: 0 40px;\r\n    display: block;\r\n}\r\n\r\n.CBWDD-Separator {\r\n    display: block;\r\n    height: 1px;\r\n    background-color: #f1f1f1;\r\n    width: 95%;\r\n    margin: 0 2.5%;\r\n\r\n}\r\n\r\n\r\n";
  styleInject(css_248z);

  var Incomp = function Incomp(props) {
    return /*#__PURE__*/React__default['default'].createElement("svg", {
      version: "1.1",
      id: "Layer_1",
      x: "0px",
      y: "0px",
      viewBox: "0 0 512 512",
      width: props.width
    }, /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M507.494,426.066L282.864,53.537c-5.677-9.415-15.87-15.172-26.865-15.172c-10.995,0-21.188,5.756-26.865,15.172    L4.506,426.066c-5.842,9.689-6.015,21.774-0.451,31.625c5.564,9.852,16.001,15.944,27.315,15.944h449.259    c11.314,0,21.751-6.093,27.315-15.944C513.508,447.839,513.336,435.755,507.494,426.066z M256.167,167.227    c12.901,0,23.817,7.278,23.817,20.178c0,39.363-4.631,95.929-4.631,135.292c0,10.255-11.247,14.554-19.186,14.554    c-10.584,0-19.516-4.3-19.516-14.554c0-39.363-4.63-95.929-4.63-135.292C232.021,174.505,242.605,167.227,256.167,167.227z     M256.498,411.018c-14.554,0-25.471-11.908-25.471-25.47c0-13.893,10.916-25.47,25.471-25.47c13.562,0,25.14,11.577,25.14,25.47    C281.638,399.11,270.06,411.018,256.498,411.018z",
      fill: props.color
    })));
  };
  var InfoIcon = function InfoIcon(props) {
    return /*#__PURE__*/React__default['default'].createElement("svg", {
      x: "0px",
      y: "0px",
      viewBox: "0 0 437.6 437.6",
      width: props.width
    }, /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M194,142.8c0.8,1.6,1.6,3.2,2.4,4.4c0.8,1.2,2,2.4,2.8,3.6c1.2,1.2,2.4,2.4,4,3.6c1.2,0.8,2.8,2,4.8,2.4\r c1.6,0.8,3.2,1.2,5.2,1.6c2,0.4,3.6,0.4,5.2,0.4c1.6,0,3.6,0,5.2-0.4c1.6-0.4,3.2-0.8,4.4-1.6h0.4c1.6-0.8,3.2-1.6,4.8-2.8\r c1.2-0.8,2.4-2,3.6-3.2l0.4-0.4c1.2-1.2,2-2.4,2.8-3.6s1.6-2.4,2-4c0-0.4,0-0.4,0.4-0.8c0.8-1.6,1.2-3.6,1.6-5.2\r c0.4-1.6,0.4-3.6,0.4-5.2s0-3.6-0.4-5.2c-0.4-1.6-0.8-3.2-1.6-5.2c-1.2-2.8-2.8-5.2-4.8-7.2c-0.4-0.4-0.4-0.4-0.8-0.8\r c-1.2-1.2-2.4-2-4-3.2c-1.6-0.8-2.8-1.6-4.4-2.4c-1.6-0.8-3.2-1.2-4.8-1.6c-2-0.4-3.6-0.4-5.2-0.4c-1.6,0-3.6,0-5.2,0.4\r c-1.6,0.4-3.2,0.8-4.8,1.6H208c-1.6,0.8-3.2,1.6-4.4,2.4c-1.6,1.2-2.8,2-4,3.2c-1.2,1.2-2.4,2.4-3.2,3.6\r c-0.8,1.2-1.6,2.8-2.4,4.4c-0.8,1.6-1.2,3.2-1.6,4.8c-0.4,2-0.4,3.6-0.4,5.2c0,1.6,0,3.6,0.4,5.2\r C192.8,139.6,193.6,141.2,194,142.8z",
      fill: props.color
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M249.6,289.2h-9.2v-98c0-5.6-4.4-10.4-10.4-10.4h-42c-5.6,0-10.4,4.4-10.4,10.4v21.6c0,5.6,4.4,10.4,10.4,10.4h8.4v66.4\r H188c-5.6,0-10.4,4.4-10.4,10.4v21.6c0,5.6,4.4,10.4,10.4,10.4h61.6c5.6,0,10.4-4.4,10.4-10.4V300\r C260,294,255.2,289.2,249.6,289.2z",
      fill: props.color
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M218.8,0C98,0,0,98,0,218.8s98,218.8,218.8,218.8s218.8-98,218.8-218.8S339.6,0,218.8,0z M218.8,408.8\r c-104.8,0-190-85.2-190-190s85.2-190,190-190s190,85.2,190,190S323.6,408.8,218.8,408.8z",
      fill: props.color
    })));
  };
  var EfficiencyIcon = function EfficiencyIcon(props) {
    return /*#__PURE__*/React__default['default'].createElement("svg", {
      x: "0px",
      y: "0px",
      viewBox: "0 0 512 512",
      width: props.width
    }, /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M310.039,100.477L262.592,53.03c-3.119-3.118-7.347-4.87-11.757-4.87H8.314  C3.722,48.16,0,51.882,0,56.473v99.763c0,4.591,3.722,8.314,8.314,8.314h242.521c4.41,0,8.639-1.752,11.757-4.87l47.447-47.447  C313.285,108.987,313.285,103.723,310.039,100.477z"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M409.802,250.122l-47.447-47.447c-3.119-3.118-7.347-4.87-11.757-4.87H8.314  c-4.592,0-8.314,3.722-8.314,8.314v99.763c0,4.591,3.722,8.314,8.314,8.314h342.284c4.41,0,8.639-1.752,11.757-4.87l47.447-47.447  C413.048,258.632,413.048,253.368,409.802,250.122z"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M509.565,399.766l-47.447-47.447c-3.119-3.118-7.347-4.87-11.757-4.87H8.314  c-4.592,0-8.314,3.722-8.314,8.314v99.763c0,4.591,3.722,8.314,8.314,8.314h442.048c4.41,0,8.639-1.752,11.757-4.87l47.447-47.447  C512.812,408.277,512.812,403.013,509.565,399.766z"
    }), /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      fill: "#FFFFFF",
      d: "M248.531,127.578L223.59,77.696c-1.413-2.817-4.287-4.595-7.437-4.595h-8.314   c-3.15,0-6.024,1.778-7.437,4.595l-24.941,49.882c-2.054,4.108-0.39,9.101,3.718,11.155c4.108,2.038,9.101,0.39,11.155-3.718   l6.016-12.032h31.29l6.016,12.032c1.461,2.915,4.392,4.595,7.445,4.595c1.25,0,2.517-0.284,3.71-0.877   C248.921,136.679,250.585,131.686,248.531,127.578z M204.666,106.355l7.331-14.662l7.331,14.662H204.666z",
      "data-original": "#FFFFFF"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: "#FFFFFF",
      d: "M339.435,250.932c0.885-2.307,1.423-4.787,1.423-7.402c0-11.464-9.32-20.784-20.784-20.784h-29.098   c-4.595,0-8.314,3.718-8.314,8.314V256v24.941c0,4.595,3.718,8.314,8.314,8.314h37.411c11.464,0,20.784-9.32,20.784-20.784   C349.171,261.075,345.265,254.616,339.435,250.932z M299.29,239.373h20.784c2.289,0,4.157,1.867,4.157,4.157   s-1.867,4.157-4.157,4.157H299.29V239.373z M328.387,272.627H299.29v-8.314h29.098c2.289,0,4.157,1.867,4.157,4.157   S330.677,272.627,328.387,272.627z",
      "data-original": "#FFFFFF"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: "#FFFFFF",
      d: "M423.994,438.899h-8.314c-18.34,0-33.254-14.914-33.254-33.254s14.914-33.254,33.254-33.254h8.314   c9.32,0,18.3,4.027,24.64,11.058c3.077,3.41,2.809,8.663-0.601,11.74c-3.402,3.077-8.655,2.817-11.74-0.601   c-3.239-3.589-7.607-5.569-12.3-5.569h-8.314c-9.166,0-16.627,7.461-16.627,16.627s7.461,16.627,16.627,16.627h8.314   c4.693,0,9.061-1.981,12.3-5.569c3.085-3.418,8.338-3.67,11.74-0.601c3.41,3.077,3.678,8.33,0.601,11.74   C442.294,434.872,433.314,438.899,423.994,438.899z",
      "data-original": "#FFFFFF"
    })), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M33.254,156.237V56.473c0-4.592,3.722-8.314,8.314-8.314H8.314C3.722,48.16,0,51.882,0,56.473v99.763  c0,4.591,3.722,8.314,8.314,8.314h33.254C36.976,164.55,33.254,160.828,33.254,156.237z",
      "data-original": "#96D255"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M33.254,305.882v-99.763c0-4.592,3.722-8.314,8.314-8.314H8.314c-4.592,0-8.314,3.722-8.314,8.314  v99.763c0,4.591,3.722,8.314,8.314,8.314h33.254C36.976,314.195,33.254,310.473,33.254,305.882z",
      "data-original": "#AFD755"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M33.254,156.237V56.473c0-4.592,3.722-8.314,8.314-8.314H8.314C3.722,48.16,0,51.882,0,56.473v99.763  c0,4.591,3.722,8.314,8.314,8.314h33.254C36.976,164.55,33.254,160.828,33.254,156.237z",
      "data-original": "#87B950"
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      fill: props.color,
      d: "M33.254,455.527v-99.763c0-4.592,3.722-8.314,8.314-8.314H8.314c-4.592,0-8.314,3.722-8.314,8.314  v99.763c0,4.591,3.722,8.314,8.314,8.314h33.254C36.976,463.84,33.254,460.118,33.254,455.527z",
      "data-original": "#C7E86E"
    })));
  };
  var CapacityIcon = function CapacityIcon(props) {
    return /*#__PURE__*/React__default['default'].createElement("svg", {
      x: "0px",
      y: "0px",
      viewBox: "0 0 512 512",
      width: props.width
    }, /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M256,42.667c-141.163,0-256,114.837-256,256C0,310.443,9.536,320,21.333,320c11.797,0,21.333-9.557,21.333-21.333\r c0-117.632,95.701-213.333,213.333-213.333s213.333,95.701,213.333,213.333c0,11.776,9.536,21.333,21.333,21.333\r S512,310.443,512,298.667C512,157.504,397.163,42.667,256,42.667z",
      fill: props.color
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M271.083,335.083c-4.16,4.16-9.621,6.251-15.083,6.251s-10.923-2.091-15.083-6.251c-8.341-8.341-8.341-21.824,0-30.165\r l104.341-104.341c-24.939-18.688-55.765-29.909-89.259-29.909c-82.325,0-149.333,66.987-149.333,149.333\r S173.675,469.333,256,469.333S405.333,402.347,405.333,320c0-33.493-11.221-64.32-29.909-89.259L271.083,335.083z",
      fill: props.color
    })));
  };
  var SoundImpact = function SoundImpact(props) {
    return /*#__PURE__*/React__default['default'].createElement("svg", {
      x: "0px",
      y: "0px",
      width: props.width,
      viewBox: "0 0 287.386 287.386"
    }, /*#__PURE__*/React__default['default'].createElement("g", null, /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M62.743,155.437v98.42c0,5.867,4.741,10.605,10.605,10.605c5.854,0,10.605-4.738,10.605-10.605v-98.42\r c0-5.856-4.751-10.605-10.605-10.605C67.484,144.832,62.743,149.576,62.743,155.437z",
      fill: props.color
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M29.456,264.582h23.351v-116.85c0.064-0.56,0.166-1.119,0.166-1.693c0-50.412,40.69-91.42,90.698-91.42\r c50.002,0,90.692,41.008,90.692,91.42c0,0.771,0.113,1.518,0.228,2.263v116.28h23.354c16.254,0,29.442-13.64,29.442-30.469\r v-60.936c0-13.878-8.989-25.57-21.261-29.249c-1.129-66.971-55.608-121.124-122.45-121.124\r c-66.86,0-121.347,54.158-122.465,121.15C8.956,147.638,0,159.32,0,173.187v60.926C0,250.932,13.187,264.582,29.456,264.582z",
      fill: props.color
    }), /*#__PURE__*/React__default['default'].createElement("path", {
      d: "M203.454,155.437v98.42c0,5.867,4.748,10.605,10.604,10.605s10.604-4.738,10.604-10.605v-98.42\r c0-5.856-4.748-10.605-10.604-10.605C208.191,144.832,203.454,149.576,203.454,155.437z",
      fill: props.color
    })));
  };

  function _templateObject() {
    var data = _taggedTemplateLiteral(["\n    display: block;\n    float: left;\n    margin: 10px 8.5px;\n    border-color: red;\n"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }
  var override = core.css(_templateObject());

  function CheckboxWithDropDown(props) {
    var PropName = props.PropName,
        RulesJSON = props.RulesJSON,
        ReadOnly = props.ReadOnly,
        DoNotTranslate = props.DoNotTranslate,
        children = props.children,
        onValueChanged = props.onValueChanged,
        _props$iconColor = props.iconColor,
        iconColor = _props$iconColor === void 0 ? "#2d4181" : _props$iconColor,
        _props$iconWidth = props.iconWidth,
        iconWidth = _props$iconWidth === void 0 ? "30px" : _props$iconWidth,
        _props$toggleContentP = props.toggleContentPanel,
        toggleContentPanel = _props$toggleContentP === void 0 ? false : _props$toggleContentP;

    var _useState = React.useState(toggleContentPanel),
        _useState2 = _slicedToArray(_useState, 2),
        DisplayDetails = _useState2[0],
        SetDisplayDetails = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        Loading = _useState4[0],
        SetLoading = _useState4[1];

    var _useState5 = React.useState(''),
        _useState6 = _slicedToArray(_useState5, 2),
        OldValue = _useState6[0],
        SetOldValue = _useState6[1];

    React.useEffect(function () {
      if (Loading) {
        var UpdatedProp = GetProperty(PropName);
        if (UpdatedProp && UpdatedProp.Value === OldValue) SetLoading(false);
      }
    }, [RulesJSON]);
    React.useEffect(function () {
      if (toggleContentPanel !== DisplayDetails) {
        SetDisplayDetails(toggleContentPanel);
      }
    }, [toggleContentPanel]);

    function ValueChanged() {
      if (!Loading && !ReadOnly) {
        SetLoading(true);
        var UpdatedValue = Value === "TRUE" ? "FALSE" : "TRUE";
        SetOldValue(UpdatedValue);
        onValueChanged([{
          Name: PropName,
          Value: UpdatedValue
        }]);
        SetDisplayDetails(!DisplayDetails);
      }
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);
    }

    function onInfoIconClick() {
      SetDisplayDetails(!DisplayDetails);
    }

    function GetTitle() {
      var DescriptionProp = GetProperty(PropName);
      if (DoNotTranslate) return DescriptionProp.Values[0].Attributes.Description;else return /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(PropName),
        defaultMessage: DescriptionProp ? /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: workflowuiGlobalfunctions.FormatTransKey(PropName + "|" + DescriptionProp.Values[0].Attributes.Description)
        }) : "MISSING TRANSLATION"
      });
    }

    var Value, Visibility;

    if (Object.entries(RulesJSON).length > 0 && RulesJSON.constructor === Object) {
      Visibility = GetProperty(PropName + ".VISIBLE");

      if (Visibility && Visibility.Value === "TRUE") {
        var MainProp = GetProperty(PropName);
        Value = MainProp.Value;
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "CBWDD-Container"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "CBWDD-MainContainer"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          onClick: ValueChanged,
          className: "CBWDD-ClickableContainer"
        }, Loading ? /*#__PURE__*/React__default['default'].createElement(reactSpinners.HashLoader, {
          css: override,
          sizeUnit: "px",
          size: 25,
          color: '#123abc',
          loading: Loading
        }) : /*#__PURE__*/React__default['default'].createElement(core$1.Checkbox, {
          id: "ctrl" + PropName,
          color: "primary",
          className: "CBWDD-Checkbox",
          checked: Value === "TRUE" ? true : false
        }), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "CBWDD-Title"
        }, GetTitle())), children ? /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-InfoIcon",
          onClick: onInfoIconClick
        }, /*#__PURE__*/React__default['default'].createElement(InfoIcon, {
          color: iconColor,
          width: iconWidth
        })) : null), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "CBWDD-Separator"
        }), DisplayDetails && children ? /*#__PURE__*/React__default['default'].createElement("div", {
          className: "CBWDD-DetailsContainer"
        }, children) : null);
      } else return null;
    }
  }

  var css_248z$1 = ".IWLCG-Container {\r\n\r\n}\r\n\r\n.IWLCG-tile {\r\n    width: 208px;\r\n    height: 220px;\r\n    border: solid 1px lightgrey;\r\n    margin-left: 20px;\r\n    margin-top: 20px;\r\n    display: inline-block;\r\n    -webkit-transition: all 0.2s;\r\n    transition: all 0.2s;\r\n    position: relative;\r\n}\r\n\r\n.IWLCG-tile:hover {\r\n    cursor: pointer;\r\n    transform: translateY(-5px);\r\n    -webkit-transition: all 0.2s;\r\n    transition: all 0.2s;\r\n    position: relative;\r\n    \r\n}\r\n\r\n.IWLCG-ImageContainer {\r\n    width: 100%;\r\n    height: 185px;\r\n    background-color: #fff;\r\n    \r\n}\r\n\r\n.IWLCG-image {\r\n    width: 150px;\r\n    margin: 0 25px;;\r\n    position: relative;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.IWLCG-Label {\r\n    background-color: lightgrey;\r\n    text-align: center;\r\n    height: 35px;\r\n    line-height: 35px;\r\n    width: 100%;\r\n    display: block;\r\n}\r\n\r\n.IWLCG-Circle-Selected {\r\n    height: 25px;\r\n    width: 25px;\r\n    border-radius: 12.5px;\r\n    background-color: green;\r\n    position: absolute;\r\n    top: -10px;\r\n    left: -10px;\r\n}\r\n\r\n.IWLCG-Circle-NotSelected {\r\n    display: none;\r\n}\r\n\r\n.IWLCG-notAllow {\r\n    border-color: red;\r\n    color: red;\r\n}\r\n\r\n.IWLCG_Disabled {\r\n    border: 1px solid gray;\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n}";
  styleInject(css_248z$1);

  var ImageFolderPath = '/Images/';

  function ImageWithLabelCheckboxGroup(props) {
    function getFullImagePath(name) {
      if (props.ImagesLocationUrl) return props.ImagesLocationUrl + name;else return ImageFolderPath + name;
    }

    function RenderListItem(value, index, Class) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        onClick: function onClick() {
          props.onValueChanged([{
            Name: props.prop.Name,
            Value: props.prop.Values[index].Value
          }]);
        },
        key: index,
        className: "IWLCG-tile ".concat(Class),
        id: "ctrl" + props.prop.Name + value.Value
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "IWLCG-ImageContainer"
      }, /*#__PURE__*/React__default['default'].createElement("img", {
        alt: "CtrlImage",
        className: "IWLCG-image",
        src: getFullImagePath(value.Attributes.Image)
      })), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "IWLCG-Label"
      }, value.Attributes.Description), /*#__PURE__*/React__default['default'].createElement("div", {
        className: props.prop.AssignedValue === value.Value ? "IWLCG-Circle-Selected" : "IWLCG-Circle-NotSelected"
      }));
    }

    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: "ctrl" + (props.prop ? props.prop.Name : null),
      className: "IWLCG-Container"
    }, props.prop ? props.prop.Values.map(function (value, index) {
      switch (value.State) {
        case 1:
          return RenderListItem(value, index, "");

        case 2:
          return props.isNotAllowedVisible ? RenderListItem(value, index, "IWLCG-notAllow") : null;

        default:
          return null;
      }
    }) : null);
  }

  var css_248z$2 = ".OptionControl-Container {\r\n    overflow: hidden;\r\n}\r\n\r\n.OptionControl-ClickableContainer {\r\n    overflow: hidden;\r\n    padding: 8px 20px 8px 40px;\r\n    width: calc(100% - 130px);\r\n    float: left;\r\n}\r\n\r\n.OptionControl-ClickableContainer:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.OptionControl-MainContainer {\r\n    overflow: auto;\r\n    \r\n}\r\n\r\n\r\n.OptionControl-Checkbox {\r\n    float: left;\r\n}\r\n\r\n.OptionControl-LabelsContainer{\r\n    margin: 5px 0 5px 20px;\r\n    float: left;\r\n}\r\n\r\n.OptionControl-OptName{\r\n    line-height: 20px;\r\n    display: block;\r\n}\r\n\r\n.OptionControl-OptNumber{\r\n    color: #928c8c;\r\n}\r\n\r\n.OptionControl-ImpactIcon{\r\n    height: 24px;\r\n    float: right;\r\n    margin: 12px 5px;\r\n}\r\n\r\n.OptionControl-InfoIcon {\r\n    height: 30px;\r\n    float: right;\r\n    margin: 16px 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n.OptionControl-CompIcon {\r\n    height: 18px;\r\n    margin: 0px 20px;\r\n    float: left;\r\n}\r\n\r\n.OptionControl-DetailsContainer {\r\n    background-color: #fafafa;\r\n    padding: 20px;\r\n    overflow: hidden;\r\n    box-shadow: 0 8px 6px -6px rgba(41, 41, 41, 0.1) inset,\r\n                0 -8px 6px -6px rgba(41, 41, 41, 0.1) inset;\r\n}\r\n\r\n.OptionControl-DetailTitle{\r\n    margin: 20px;\r\n    font-size: 0.95rem;\r\n}\r\n\r\n.OptionControl-Detail{\r\n    font-size: 0.90rem;\r\n    margin: 0 40px;\r\n    display: block;\r\n}\r\n\r\n.OptionControl-Separator {\r\n    display: block;\r\n    height: 1px;\r\n    background-color: #f1f1f1;\r\n    width: 95%;\r\n    margin: 0 2.5%;\r\n\r\n}\r\n\r\n.OptionControl-Price{\r\n    display: block;\r\n    float: right;\r\n    margin: 15px 30px;\r\n    color: #928c8c;\r\n}\r\n\r\n";
  styleInject(css_248z$2);

  function _templateObject$1() {
    var data = _taggedTemplateLiteral(["\n    display: block;\n    float: left;\n    margin: 10px 8.5px;\n    border-color: red;\n"]);

    _templateObject$1 = function _templateObject() {
      return data;
    };

    return data;
  }
  var override$1 = core.css(_templateObject$1());

  function OptionControl(props) {
    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        DisplayDetails = _useState2[0],
        SetDisplayDetails = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        Loading = _useState4[0],
        SetLoading = _useState4[1];

    var _useState5 = React.useState(''),
        _useState6 = _slicedToArray(_useState5, 2),
        OldValue = _useState6[0],
        SetOldValue = _useState6[1];

    var formatMessage = props.intl.formatMessage;
    React.useEffect(function () {
      var UpdatedProp = GetProperty(props.PropName);

      if (Loading) {
        if (UpdatedProp && UpdatedProp.Value === OldValue) SetLoading(false);
      } else if (UpdatedProp && UpdatedProp.Value === "FALSE" && InputBlock && DisplayDetails === true) SetDisplayDetails(false);
    }, [props.RulesJSON]);
    React.useEffect(function () {
      SetDisplayDetails(false);
    }, [props.PropName]);

    function ValueChanged() {
      if (!Loading) {
        SetLoading(true);
        var UpdatedValue = Value === "TRUE" ? "FALSE" : "TRUE";
        SetOldValue(UpdatedValue);
        if ((props.children || InputBlock) && Value === "FALSE") SetDisplayDetails(true);else SetDisplayDetails(false);
        var NewAssignments = [];

        if (GetPrice()) {
          var UnitDiscountProp = GetProperty("Sel_fUnitDiscount");
          if (UnitDiscountProp && UpdatedValue === "TRUE") NewAssignments.push({
            Name: props.PropName + ".DISCOUNT",
            Value: UnitDiscountProp.Value
          });
        }

        NewAssignments.push({
          Name: props.PropName,
          Value: UpdatedValue
        });
        props.onValueChanged(NewAssignments);
      }
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    var ImpactData = {
      colors: [{
        value: "+/-",
        color: "#f8a31e"
      }, {
        value: "+",
        color: "#6abd55"
      }, {
        value: "-",
        color: "#cc0000"
      }, {
        value: "NA",
        color: "#d8d8d8"
      }],
      CapacityText: [{
        value: "+/-",
        txt: "This option may have an impact on the unit capacity"
      }, {
        value: "+",
        txt: "This option has a positive impact on the unit capacity"
      }, {
        value: "-",
        txt: "This option has a negative impact on the unit capacity"
      }, {
        value: "NA",
        txt: "This option has no impact on the unit capacity"
      }],
      EfficiencyText: [{
        value: "+/-",
        txt: "This option may have an impact on the unit efficiency"
      }, {
        value: "+",
        txt: "This option has a positive impact on the unit efficiency"
      }, {
        value: "-",
        txt: "This option has a negative impact on the unit efficiency"
      }, {
        value: "NA",
        txt: "This option has no impact on the unit efficiency"
      }],
      SoundText: [{
        value: "+/-",
        txt: "This option may have an impact on the unit sound power"
      }, {
        value: "+",
        txt: "This option has a positive impact on the unit sound power"
      }, {
        value: "-",
        txt: "This option has a negative impact on the unit sound power"
      }, {
        value: "NA",
        txt: "This option has no impact on the unit sound power"
      }]
    };

    function GetImpactIconColor(Val) {
      var colorObj = ImpactData.colors.find(function (val) {
        return val.value === Val;
      });
      if (colorObj) return colorObj.color;else return "#d8d8d8";
    }

    function GetImpactText(Val, type) {
      var TextObject;
      if (type === "Capacity") TextObject = ImpactData.CapacityText.find(function (val) {
        return val.value === Val;
      });
      if (type === "Efficiency") TextObject = ImpactData.EfficiencyText.find(function (val) {
        return val.value === Val;
      });
      if (type === "Sound") TextObject = ImpactData.SoundText.find(function (val) {
        return val.value === Val;
      });
      if (TextObject) return /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(TextObject.txt)
      });else return "";
    }

    function onInfoIconClick() {
      SetDisplayDetails(!DisplayDetails);
    }

    function GetOptionDescription(MainProp) {
      return props.DoNotTranslate ? MainProp.Values[0].Attributes && MainProp.Values[0].Attributes.Description : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(props.PropName),
        defaultMessage: formatMessage({
          id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "DESCRIPTION" + "|" + MainProp.Values[0].Attributes.Description),
          defaultMessage: 'No translation'
        })
      });
    }

    function GetDetailedDescription(MainProp) {
      return props.DoNotTranslate ? MainProp.Values[0].Attributes && MainProp.Values[0].Attributes.DetailledDescription : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + ".DETAILEDDESCRIPTION"),
        defaultMessage: formatMessage({
          id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "DETAILEDDESCRIPTION" + "|" + MainProp.Values[0].Attributes.DetailledDescription)
        })
      });
    }

    function GetAdvantage(MainProp) {
      return props.DoNotTranslate ? MainProp.Values[0].Attributes && MainProp.Values[0].Attributes.Advantage : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + ".ADVANTAGE"),
        defaultMessage: formatMessage({
          id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "ADVANTAGE" + "|" + MainProp.Values[0].Attributes.Advantage)
        })
      });
    }

    function GetPrice() {
      var PriceProp = GetProperty(props.PropName + ".MLP");

      if (PriceProp) {
        return parseInt(PriceProp.Value).toLocaleString() + " €";
      }
    }

    var Value, Allowed, InputBlock, InputBlockComp, Price;

    if (Object.entries(props.RulesJSON).length > 0 && props.RulesJSON.constructor === Object) {
      var VisibilityProp = GetProperty(props.PropName + ".VISIBLE");

      if (VisibilityProp && VisibilityProp.Value === "TRUE") {
        var MainProp = GetProperty(props.PropName);

        if (MainProp) {
          Value = MainProp.Value;
          InputBlock = MainProp.Values[0].Attributes.InputBlock;
          if (InputBlock) InputBlockComp = props.InputBlocksLib[InputBlock];
          Allowed = MainProp.Values[0].State === 2;
          Price = GetPrice();
        }

        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-Container"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-MainContainer"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          onClick: ValueChanged,
          className: "OptionControl-ClickableContainer"
        }, Loading ? /*#__PURE__*/React__default['default'].createElement(reactSpinners.HashLoader, {
          css: override$1,
          sizeUnit: "px",
          size: 25,
          color: '#123abc',
          loading: Loading
        }) : /*#__PURE__*/React__default['default'].createElement(core$1.Checkbox, {
          color: "primary",
          className: "OptionControl-Checkbox",
          id: "ctrl" + props.PropName,
          checked: Value === "TRUE" ? true : false
        }), /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-LabelsContainer"
        }, /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-OptName"
        }, GetOptionDescription(MainProp)), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-OptNumber"
        }, MainProp.Values[0].Attributes.OptNumber)), Allowed ? /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-CompIcon"
        }, /*#__PURE__*/React__default['default'].createElement(Incomp, {
          color: "#FF9900",
          width: "18px"
        })) : null, /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
          title: GetImpactText(MainProp.Values[0].Attributes.SoundImpact, "Sound"),
          placement: "top"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-ImpactIcon"
        }, /*#__PURE__*/React__default['default'].createElement(SoundImpact, {
          color: GetImpactIconColor(MainProp.Values[0].Attributes.SoundImpact),
          width: "20px"
        }))), /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
          title: GetImpactText(MainProp.Values[0].Attributes.EfficiencyImpact, "Efficiency"),
          placement: "top"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-ImpactIcon"
        }, /*#__PURE__*/React__default['default'].createElement(EfficiencyIcon, {
          color: GetImpactIconColor(MainProp.Values[0].Attributes.EfficiencyImpact),
          width: "20px"
        }))), /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
          title: GetImpactText(MainProp.Values[0].Attributes.CapacityImpact, "Capacity"),
          placement: "top"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-ImpactIcon"
        }, /*#__PURE__*/React__default['default'].createElement(CapacityIcon, {
          color: GetImpactIconColor(MainProp.Values[0].Attributes.CapacityImpact),
          width: "20px"
        }))), Price && props.DisplayPrice ? /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-Price"
        }, Price) : null), /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
          title: /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
            id: "GetMoreInfoOnOption"
          }),
          placement: "top"
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-InfoIcon",
          onClick: onInfoIconClick
        }, /*#__PURE__*/React__default['default'].createElement(InfoIcon, {
          color: "#2d4181",
          width: "26px"
        })))), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-Separator"
        }), DisplayDetails ? /*#__PURE__*/React__default['default'].createElement("div", {
          className: "OptionControl-DetailsContainer"
        }, /*#__PURE__*/React__default['default'].createElement("h3", {
          className: "OptionControl-DetailTitle"
        }, /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: "Description"
        })), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-Detail"
        }, GetDetailedDescription(MainProp)), /*#__PURE__*/React__default['default'].createElement("h3", {
          className: "OptionControl-DetailTitle"
        }, /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: "Advantage"
        })), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "OptionControl-Detail"
        }, GetAdvantage(MainProp)), props.children || InputBlock ? /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("h3", {
          className: "OptionControl-DetailTitle"
        }, /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: "Conditions"
        })), props.children, InputBlockComp ? /*#__PURE__*/React__default['default'].createElement(InputBlockComp, {
          RulesJSON: props.RulesJSON,
          onNewAssignment: props.onValueChanged,
          unitSystem: props.unitSystem
        }) : null) : null) : null);
      } else return null;
    }
  }

  var OptionControl$1 = reactIntl.injectIntl(OptionControl);

  var css_248z$3 = ".SCB-Container {\r\n    height: 32px;\r\n    min-width: 200px;\r\n    cursor: pointer;\r\n    position: relative;\r\n\r\n}\r\n\r\n.SCB-Container:disabled {\r\n    cursor: default;\r\n}\r\n\r\n.SCB-valueContainer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0 10px;\r\n    line-height: 30px;\r\n    cursor: pointer;\r\n    background-color: #FFFFFF;\r\n    color: black;\r\n}\r\n.SCB-valueContainer>span {\r\n    width: 100%;\r\n}\r\n.SCB-valueContainer span span {\r\n    float: right;\r\n}\r\n.NotAllowedValue {\r\n    color: #cc0000;\r\n}\r\n\r\n.SCB-valueContainer:hover {\r\n    background-color: #F0F0F0;\r\n}\r\n\r\n.SCB-Container-notAllowed {\r\n    border-color: #cc0000;\r\n    background-color: #ffe9e9;\r\n    color: #cc0000;\r\n}\r\n\r\n.SCB-Container:focus{\r\n    outline: none;\r\n}\r\n\r\n.SCB-Price {\r\n    color: #9e9e9e;\r\n    line-height: 30px;\r\n    margin: 0 15px 0 30px;\r\n}\r\n\r\n.SCB-BtnWrapper {\r\n    width: calc(100% - 20px);\r\n    height: 100%;\r\n    float: left;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 0 10px;\r\n    border: #cccccc solid 1px;\r\n}\r\n\r\n.SCB-BtnWrapper-noBorder {\r\n    border: none;\r\n}\r\n\r\n.SCB-BtnWrapper-Disabled {\r\n    background-color: #ebebe4;\r\n}\r\n\r\n.SCB-BtnWrapper span {\r\n    line-height: 32px;\r\n}\r\n\r\n.SCB-BtnWrapper svg {\r\n    padding: 5px;\r\n}\r\n\r\n.SCB-SubBtnWrapper {\r\n    position: absolute;\r\n    color: #2d4181;\r\n    background-color: white;\r\n    z-index: 100;\r\n    box-Shadow: 0 0 10px rgba(150, 150, 150, 0.5);\r\n    width: 100%;\r\n    top: 35px;\r\n    right: 0px;\r\n    margin-bottom: 50px;\r\n    max-height: 200px;\r\n    overflow: auto;\r\n}\r\n\r\n.SCB-input-searchable {\r\n    border: none;\r\n    border-bottom: 1px solid #ced4da;\r\n    width: 100%;\r\n    outline: none;\r\n}\r\n\r\n.SCB-input-searchable-list {\r\n    box-shadow: 0 5px 10px rgba(150, 150, 150, 0.5);\r\n    padding-top: 8px;\r\n    top: 32px;\r\n}";
  styleInject(css_248z$3);

  function SimpleCombobox(props) {
    var _props$isSearchable = props.isSearchable;
    _props$isSearchable = _props$isSearchable === void 0 ? {} : _props$isSearchable;
    var search = _props$isSearchable.search,
        placeholder = _props$isSearchable.placeholder,
        filter = _props$isSearchable.filter,
        intl = props.intl;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        Open = _useState2[0],
        setOpen = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        Visible = _useState4[0],
        setVisible = _useState4[1];

    var _useState5 = React.useState(true),
        _useState6 = _slicedToArray(_useState5, 2),
        Enabled = _useState6[0],
        setEnabled = _useState6[1];

    var _useState7 = React.useState(true),
        _useState8 = _slicedToArray(_useState7, 2),
        Valid = _useState8[0],
        setValid = _useState8[1];

    var _useState9 = React.useState(''),
        _useState10 = _slicedToArray(_useState9, 2),
        editedValue = _useState10[0],
        setEditedValue = _useState10[1];

    var ref = React__default['default'].useRef();
    useOnClickOutside__default['default'](ref, function () {
      return setOpen(false);
    });
    var prop = GetProperty(props.PropName);
    React.useEffect(function () {
      var SelectedOption = GetSelectedOption();

      if (SelectedOption && SelectedOption.State === 2 && props.HideNotAllowedValues) {
        var defaultProp = GetProperty(prop.Name + ".DEFAULT");
        props.onValueChanged([{
          Name: prop.Name,
          Value: defaultProp.Value
        }]);
      }

      UpdateState();
    }, [props.RulesJSON]);

    function UpdateState() {
      var VisibleProp;
      if (props.Visible) VisibleProp = GetProperty(props.Visible);
      if (VisibleProp === undefined) VisibleProp = GetProperty(props.PropName + ".VISIBLE");
      if (VisibleProp === undefined) setVisible(true);else setVisible(VisibleProp.Value === "FALSE" ? false : true);
      var EnabledProp;
      if (props.Enabled) EnabledProp = GetProperty(props.Enabled);
      if (EnabledProp === undefined) EnabledProp = GetProperty(props.PropName + ".ENABLED");
      if (EnabledProp === undefined) setEnabled(true);else setEnabled(EnabledProp.Value === "FALSE" ? false : true);
      var ValidProp;
      if (props.Valid) ValidProp = GetProperty(props.Valid);
      if (ValidProp === undefined) ValidProp = GetProperty(props.PropName + ".VALID");
      if (ValidProp === undefined) setValid(true);else setValid(ValidProp.Value === "FALSE" ? false : true);
    }

    function onDropBtnClick() {
      if (Enabled) {
        setOpen(!Open);
      }
    }

    function editHandler(event) {
      setEditedValue(event.target.value);
    }

    function updateValue(event) {
      event.stopPropagation();

      if (event.key === workflowuiGlobalfunctions.keyboard.ENTER) {
        ValueChanged(editedValue);
      }
    }

    function ValueChanged(value) {
      var SelectedOption = prop.Values.find(function (Value) {
        return Value.Value.toLowerCase() === value.toLowerCase();
      });
      SelectedOption && props.onValueChanged([{
        Name: prop.Name,
        Value: SelectedOption.Value
      }]);

      if (search) {
        setEditedValue('');
      }

      setOpen(false);
    }

    function GetSelectedOption() {
      if (prop && prop.Value) {
        var SelectedOption = prop.Values.find(function (Value) {
          return Value.Value === prop.Value;
        });
        return SelectedOption;
      }
    }

    function GetSelectedValue() {
      var SelectedOption = GetSelectedOption();
      if (SelectedOption) return props.DoNotTranslate ? SelectedOption.Attributes.Description : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
        id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "|" + SelectedOption.Attributes.Description)
      });else return "";
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function GetPrice(Value) {
      var PriceItem = props.Prices.find(function (p) {
        return p.Size === Value;
      });
      if (PriceItem && PriceItem.Price) return PriceItem.Price.toLocaleString() + " €";
    }

    function GetPriceDollar(Value) {
      return !!Value ? props.isNoMLP ? " $ ".concat(Value) : " $ ".concat(Value, " MLP") : " $ TBD";
    }

    if (Visible) {
      return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, props.isValidationMessage && Valid === false && /*#__PURE__*/React__default['default'].createElement("span", {
        className: "ErrorText"
      }, " ", props.isValidationMessage, " "), /*#__PURE__*/React__default['default'].createElement("div", {
        ref: ref,
        id: "ctrl" + props.PropName,
        className: (prop && prop.IsRelaxed ? "SCB-Container-notAllowed " : "") + ("SCB-Container " + props.className)
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: classNames__default['default'](!Enabled && "SCB-BtnWrapper-Disabled", "SCB-BtnWrapper", search && "SCB-BtnWrapper-noBorder"),
        onClick: function onClick() {
          return onDropBtnClick();
        }
      }, search && Open ? /*#__PURE__*/React__default['default'].createElement("input", {
        type: "text",
        className: "SCB-input-searchable",
        placeholder: placeholder || workflowuiGlobalfunctions.injectIntlTranslation(intl, "Search"),
        value: editedValue,
        onChange: editHandler,
        onClick: updateValue,
        onKeyPress: updateValue
      }) : /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement("span", null, GetSelectedValue(), prop && prop.Value && props.PriceDollar && /*#__PURE__*/React__default['default'].createElement("span", null, GetPriceDollar(GetSelectedOption().Attributes.MLP))), /*#__PURE__*/React__default['default'].createElement("div", null, props.Prices && props.Prices.length > 0 && /*#__PURE__*/React__default['default'].createElement("span", {
        className: "SCB-Price"
      }, GetPrice(GetSelectedValue())), /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        icon: freeSolidSvgIcons.faSortDown,
        color: "#000000"
      })))), Open && /*#__PURE__*/React__default['default'].createElement("div", {
        className: classNames__default['default']("SCB-SubBtnWrapper", search && "SCB-input-searchable-list")
      }, prop.Values.map(function (value, index) {
        if (props.HideNotAllowedValues && value.State === 2 || value.Attributes["VISIBLE"] === "FALSE") return null;else if (search && editedValue && (filter === "startsWith" ? !value.Attributes.Description.toLowerCase().startsWith(editedValue.toLowerCase()) : !value.Attributes.Description.toLowerCase().includes(editedValue.toLowerCase()))) return null;else if (props.DoNotTranslate) return /*#__PURE__*/React__default['default'].createElement("div", {
          valueid: value.Value,
          onClick: function onClick() {
            return ValueChanged(value.Value);
          },
          className: (value.State > 1 ? "NotAllowedValue" : "") + " SCB-valueContainer",
          key: index
        }, /*#__PURE__*/React__default['default'].createElement("span", null, value.Attributes.Description, props.PriceDollar ? /*#__PURE__*/React__default['default'].createElement("span", null, GetPriceDollar(value.Attributes.MLP)) : null), props.Prices && props.Prices.length > 0 ? /*#__PURE__*/React__default['default'].createElement("span", {
          className: "SCB-Price"
        }, GetPrice(value.Attributes.Description)) : null);else return /*#__PURE__*/React__default['default'].createElement("div", {
          valueid: value.Value,
          onClick: function onClick() {
            return ValueChanged(value.Value);
          },
          className: (value.State > 1 ? "NotAllowedValue" : "") + " SCB-valueContainer",
          key: index
        }, /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "|" + value.Attributes.Description),
          key: index
        }), props.Prices && props.Prices.length > 0 ? /*#__PURE__*/React__default['default'].createElement("span", {
          className: "SCB-Price"
        }, GetPrice(value.Attributes.Description)) : null);
      }))));
    } else {
      return null;
    }
  }

  var SimpleCombobox$1 = reactIntl.injectIntl(SimpleCombobox);

  var css_248z$4 = ".SRBG-Label-vertical {\r\n    margin: 10px;\r\n    font-size: 0.92rem;\r\n    display: block;\r\n}\r\n\r\n.SRBG-Label-horizontal {\r\n    margin: 10px;\r\n    font-size: 14px;\r\n    display: block;\r\n    float: left;\r\n\r\n}\r\n\r\n.SRBG-Label-vertical:hover, .SRBG-Label-horizontal:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.SRBG-radio {\r\n    margin-right: 5px;\r\n}\r\n\r\n.SRBG-radio-notAllowed {\r\n    color: #cc0000;\r\n}";
  styleInject(css_248z$4);

  function SimpleRadioButtonGroup(props) {
    var _props$notAllowedDefa = props.notAllowedDefaultState,
        notAllowedDefaultState = _props$notAllowedDefa === void 0 ? false : _props$notAllowedDefa,
        _props$checkEnabledRu = props.checkEnabledRule,
        checkEnabledRule = _props$checkEnabledRu === void 0 ? false : _props$checkEnabledRu,
        _props$useValueAsKey = props.useValueAsKey,
        useValueAsKey = _props$useValueAsKey === void 0 ? false : _props$useValueAsKey;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        Visibility = _useState2[0],
        SetVisibility = _useState2[1];

    var _useState3 = React.useState(true),
        _useState4 = _slicedToArray(_useState3, 2),
        Enabled = _useState4[0],
        SetEnabled = _useState4[1];

    var _useState5 = React.useState(null),
        _useState6 = _slicedToArray(_useState5, 2),
        Prop = _useState6[0],
        SetProp = _useState6[1];

    var VISIBLE = '.VISIBLE';
    var ENABLED = '.ENABLED';
    React__default['default'].useEffect(function () {
      handleInputState(VISIBLE);

      if (checkEnabledRule) {
        handleInputState(ENABLED);
      }

      var Prop = GetProperty(props.PropName);
      SetProp(Prop); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [null, props.RulesJSON]);

    function handleInputState(type) {
      var PropData = GetProperty(props.PropName + type);

      if (PropData) {
        switch (type) {
          case VISIBLE:
            SetVisibility(PropData.Value === "TRUE" ? true : false);
            break;

          case ENABLED:
            SetEnabled(PropData.Value === "TRUE" ? true : false);
            break;
        }
      } else {
        SetVisibility(true);
        SetEnabled(true);
      }
    }

    function handleChange(event) {
      props.onValueChanged([{
        Name: props.PropName,
        Value: event.target.value
      }]);
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function GetClassName() {
      if (props.className) return props.className;else if (props.vertical) return "SRBG-Label-vertical";else return "SRBG-Label-horizontal";
    }

    if (Visibility) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        id: "ctrl" + props.PropName
      }, Prop && Prop.Values.map(function (value, index) {
        if (props.HideNotAllowedValues && value.State === 2) return null;else return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, /*#__PURE__*/React__default['default'].createElement("label", {
          key: index,
          className: (value.State === 2 && (notAllowedDefaultState || Prop.AssignedValue === value.Value) ? "SRBG-radio-notAllowed " : "") + GetClassName()
        }, /*#__PURE__*/React__default['default'].createElement("input", {
          id: "ctrl" + props.PropName + value.Value,
          className: "SRBG-radio",
          type: "radio",
          name: props.PropName,
          value: value.Value,
          onChange: handleChange,
          checked: Prop.AssignedValue === value.Value ? true : false,
          disabled: !Enabled
        }), props.DoNotTranslate ? /*#__PURE__*/React__default['default'].createElement("span", null, value.Attributes.Description) : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: workflowuiGlobalfunctions.FormatTransKey(props.PropName + "|" + (useValueAsKey ? value.Value : value.Attributes.Description)),
          defaultMessage: value.Attributes.Description
        })), !!value.Attributes.Note && props.vertical ? /*#__PURE__*/React__default['default'].createElement("div", null, " ", value.Attributes.Note.split("||").map(function (value, index) {
          return /*#__PURE__*/React__default['default'].createElement("li", {
            className: props.NoteclassName
          }, value);
        })) : "");
      }));
    } else return null;
  }

  var css_248z$5 = ".TBWLAI-container {\r\n    \r\n    max-width: 300px;\r\n    min-height: 30px;\r\n}\r\n\r\n.RelaxedHighlight {\r\n    border: #c00000 solid 1px;\r\n    height: 32px;\r\n}\r\n\r\n.TBWLAI-InputContainer {\r\n    height: 30px;\r\n    width: 100%;\r\n    float: left;\r\n}\r\n\r\n.TBWLAI-ImageContainer {\r\n    width: 33px;\r\n    height: 100%;\r\n    float: left;\r\n    background-color: #eeeeee;\r\n    border: #cccccc solid 1px;\r\n}\r\n\r\n.TBWLAI-Image {\r\n    width: 20px;\r\n    margin: 5px;\r\n}\r\n\r\n.TBWLAI-input{\r\n    border: #cccccc solid 1px;\r\n    float: left;\r\n    width: Calc(100% - 160px);\r\n    height: 100%;\r\n    margin: 0px;\r\n    padding: 0px 10px;\r\n    font-size: 14px;\r\n\r\n}\r\n.TBWLAI-input-label{\r\n    border: #cccccc solid 1px;\r\n    float: left;\r\n    width: Calc(100% - 125px);\r\n    height: 100%;\r\n    margin: 0px;\r\n    padding: 0px 10px;\r\n    font-size: 14px;\r\n}\r\n\r\n.TBWLAI-input-full{\r\n    border: #cccccc solid 1px;\r\n    float: left;\r\n    height: 100%;\r\n    margin: 0px;\r\n    padding: 0px 10px;\r\n\r\n}\r\n\r\n.TBWLAI-input:focus{\r\n    outline: none;\r\n\r\n}\r\n\r\n.TBWLAI-input:invalid, .TBWLAI-input-label:invalid, .TBWLAI-input-full:invalid, .ErrorCss{\r\n    border: #c00000 solid 1px;\r\n    background-color: #ffe9e9;\r\n    \r\n\r\n}\r\n\r\n.TBWLAI-label{\r\n    display: block;\r\n    float: left;\r\n    width: 100px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    font-size: 14px;\r\n    text-align: center;\r\n    background-color: #eeeeee;\r\n    border-top: #cccccc solid 1px;\r\n    border-right: #cccccc solid 1px;\r\n    border-bottom: #cccccc solid 1px;\r\n}\r\n\r\n.TBWLAI-Select {\r\n    width: 101px;\r\n    height: 32px;\r\n    line-height: 32px;\r\n    text-align-last:center;\r\n    float: left;\r\n    background-color: #eeeeee;\r\n    border-top: #cccccc solid 1px;\r\n    border-right: #cccccc solid 1px;\r\n    border-bottom: #cccccc solid 1px;\r\n    border-left: hidden;\r\n    cursor: pointer;\r\n}\r\n\r\n.TBWLAI-Select:focus {\r\n    outline: none;\r\n}\r\n\r\n.TBWLAI-Select:disabled {\r\n    cursor: default;\r\n}\r\n\r\n.TBWLAI-SelectOption {\r\n    padding: 5px 10px;\r\n}\r\n\r\n.TBWLAI-footer {\r\n    font-size: 0.9rem;\r\n    color: #aaaaaa;\r\n    margin-top: 0;\r\n    line-height: 25px;\r\n}\r\n\r\n.TBWLAI-CheckBox {\r\n    margin: 9px 11px;\r\n}\r\n\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n    /* display: none; <- Crashes Chrome on hover */\r\n    -webkit-appearance: none;\r\n    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\r\n}";
  styleInject(css_248z$5);

  function TextBoxWithLabel(props) {
    var _React$useState = React__default['default'].useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        DisplayMinMax = _React$useState2[0],
        SetDisplayMinMax = _React$useState2[1];

    var _React$useState3 = React__default['default'].useState(true),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        Visibility = _React$useState4[0],
        SetVisibility = _React$useState4[1];

    var _React$useState5 = React__default['default'].useState(0),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        Value = _React$useState6[0],
        SetValue = _React$useState6[1];

    var _React$useState7 = React__default['default'].useState(),
        _React$useState8 = _slicedToArray(_React$useState7, 2),
        Min = _React$useState8[0],
        SetMin = _React$useState8[1];

    var _React$useState9 = React__default['default'].useState(),
        _React$useState10 = _slicedToArray(_React$useState9, 2),
        Max = _React$useState10[0],
        SetMax = _React$useState10[1];

    var _React$useState11 = React__default['default'].useState(),
        _React$useState12 = _slicedToArray(_React$useState11, 2),
        Unit = _React$useState12[0],
        SetUnit = _React$useState12[1];

    var _React$useState13 = React__default['default'].useState(),
        _React$useState14 = _slicedToArray(_React$useState13, 2),
        UnitProp = _React$useState14[0],
        SetUnitProp = _React$useState14[1];

    var _React$useState15 = React__default['default'].useState(false),
        _React$useState16 = _slicedToArray(_React$useState15, 2),
        Relaxed = _React$useState16[0],
        SetRelaxed = _React$useState16[1];

    var _React$useState17 = React__default['default'].useState(true),
        _React$useState18 = _slicedToArray(_React$useState17, 2),
        Enabled = _React$useState18[0],
        SetEnabled = _React$useState18[1];

    var _React$useState19 = React__default['default'].useState(false),
        _React$useState20 = _slicedToArray(_React$useState19, 2),
        OutOfRange = _React$useState20[0],
        SetOutOfRange = _React$useState20[1];

    var _React$useState21 = React__default['default'].useState(0),
        _React$useState22 = _slicedToArray(_React$useState21, 2),
        CheckboxProp = _React$useState22[0],
        SetCheckboxProp = _React$useState22[1];

    React.useEffect(function () {
      var VisibleProp;
      if (props.Visible) VisibleProp = GetProperty(props.Visible);else VisibleProp = GetProperty(props.PropName + ".VISIBLE");

      if (VisibleProp) {
        SetVisibility(VisibleProp.Value === "TRUE" ? true : false);
      } else SetVisibility(true);

      UpdateStates(); // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [null, props.unitSystem, props.RulesJSON]);
    React.useEffect(function () {
      SetOutOfRange(Value < Min || Value > Max);
    }, [Min, Max, Value]);

    function UpdateStates() {
      if (Object.entries(props.RulesJSON).length > 0 && props.RulesJSON.constructor === Object) {
        var MainProp = GetProperty(props.PropName);

        var _UnitProp = GetProperty(props.PropName + ".UNIT");

        var EnabledProp;
        if (props.Enabled) EnabledProp = GetProperty(props.Enabled);else EnabledProp = GetProperty(props.PropName + ".ENABLED");
        var UnitNumber;

        if (_UnitProp) {
          UnitNumber = _UnitProp.Value;

          if (!UnitNumber && _UnitProp.Values.length > 1) {
            //Assign default unit
            var UnitDefault = GetProperty(props.PropName + ".UNIT.DEFAULT").Value;
            props.onValueChanged([{
              Name: props.PropName + ".UNIT",
              Value: UnitDefault
            }]);
          } else {
            if (MainProp) {
              SetValue(FormatNumber(MainProp.Value, UnitNumber));
              SetMin(FormatNumber(GetProperty(props.PropName + ".MIN").Value, UnitNumber));
              SetMax(FormatNumber(GetProperty(props.PropName + ".MAX").Value, UnitNumber));
            }

            SetUnitProp(_UnitProp);
            SetUnit(ngecatUnitsconversion.GetUnitLabel(UnitNumber, props.unitSystem));
            if (EnabledProp) SetEnabled(EnabledProp.Value === "TRUE" ? true : false);else SetEnabled(true);
            if (props.CheckboxPropName) SetCheckboxProp(GetProperty(props.CheckboxPropName));
            var relaxProp = props.RulesJSON.RelaxedVarNames.find(function (propNa) {
              return propNa === props.PropName;
            });
            if (relaxProp) SetRelaxed(true);else SetRelaxed(false);
          }
        }
      }
    }

    function SignificantDigit(valueToPrint) {
      if (valueToPrint > 0 && valueToPrint < 1) {
        return Number.parseFloat(valueToPrint).toPrecision(3);
      } else {
        return Math.round(valueToPrint * 100) / 100;
      }
    }

    function FormatNumber(value, UnitNumber) {
      if (props.unitSystem === "Metric") value = ngecatUnitsconversion.GetMetricValue(value, UnitNumber);
      return SignificantDigit(value);
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function onInputFocus() {
      SetDisplayMinMax(true);
    }

    function onInputFocusOut() {
      SetDisplayMinMax(false);
      var OldValue = GetProperty(props.PropName).Value;

      if (isNaN(Value) || Value === "") {
        SetValue(SignificantDigit(OldValue, UnitProp.Value));
      } else {
        var NewValue = Value;
        if (props.unitSystem === "Metric") NewValue = ngecatUnitsconversion.GetEnglishValue(Value, UnitProp.Value);
        if (parseFloat(OldValue) !== parseFloat(NewValue)) props.onValueChanged([{
          Name: props.PropName,
          Value: NewValue.toString().replace(',', '.')
        }]);else SetValue(FormatNumber(OldValue, UnitProp.Value));
        SetOutOfRange(parseFloat(Value) < Min || parseFloat(Value) > Max);
      }
    }

    function onChange(event) {
      var value = event.target.value.trim().replace(",", ".");
      if (!isNaN(value) || value === "-" || value === ".") SetValue(value);
    }

    function onUnitChanged(event) {
      var NewValue = Math.round(ngecatUnitsconversion.SameSystemConversion(UnitProp.Value, event.target.value, Value, props.unitSystem) * 100) / 100;
      if (props.unitSystem === "Metric") props.onValueChanged([{
        Name: UnitProp.Name,
        Value: event.target.value
      }, {
        Name: props.PropName,
        Value: ngecatUnitsconversion.GetEnglishValue(NewValue, event.target.value).toString().replace(',', '.')
      }]);else props.onValueChanged([{
        Name: UnitProp.Name,
        Value: event.target.value
      }, {
        Name: props.PropName,
        Value: NewValue.toString().replace(',', '.')
      }]);
    }

    function handleCheckChange() {
      props.onValueChanged([{
        Name: props.CheckboxPropName,
        Value: CheckboxProp.Value === "TRUE" ? "FALSE" : "TRUE"
      }]);
    }

    function PaintLabel() {
      if (Unit !== '') {
        if (UnitProp && UnitProp.Values.length > 1) {
          return /*#__PURE__*/React__default['default'].createElement("select", {
            className: "TBWLAI-Select",
            onChange: onUnitChanged,
            value: UnitProp.Value
          }, UnitProp.Values.map(function (Unit, index) {
            return /*#__PURE__*/React__default['default'].createElement("option", {
              key: index,
              className: "TBWLAI-SelectOption",
              value: Unit.Value
            }, ngecatUnitsconversion.GetUnitLabel(Unit.Value, props.unitSystem));
          }));
        } else {
          return /*#__PURE__*/React__default['default'].createElement("span", {
            className: "TBWLAI-label"
          }, Unit);
        }
      } else {
        return null;
      }
    }

    if (Visibility) return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "TBWLAI-container " + (Relaxed ? "RelaxedHighlight " : "") + props.className
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "TBWLAI-InputContainer"
    }, props.Image ? /*#__PURE__*/React__default['default'].createElement("div", {
      className: "TBWLAI-ImageContainer"
    }, props.Tooltip ? /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
      title: props.Tooltip,
      placement: "top"
    }, /*#__PURE__*/React__default['default'].createElement("img", {
      alt: "ImageIcon",
      className: "TBWLAI-Image",
      src: '/Images/' + props.Image
    })) : /*#__PURE__*/React__default['default'].createElement("img", {
      alt: "ImageIcon",
      className: "TBWLAI-Image",
      src: '/Images/' + props.Image
    })) : null, props.CheckboxPropName ? /*#__PURE__*/React__default['default'].createElement("div", {
      className: "TBWLAI-ImageContainer"
    }, /*#__PURE__*/React__default['default'].createElement("input", {
      className: "TBWLAI-CheckBox",
      type: "checkbox",
      name: props.Checkbox,
      onChange: handleCheckChange,
      checked: CheckboxProp.Value === "TRUE" ? true : false
    })) : null, /*#__PURE__*/React__default['default'].createElement("input", {
      id: "ctrl" + props.PropName,
      disabled: Enabled ? false : true,
      onFocus: onInputFocus,
      onBlur: onInputFocusOut,
      className: (OutOfRange ? "ErrorCss " : "") + (Unit !== '' ? props.CheckboxPropName || props.Image ? "TBWLAI-input" : "TBWLAI-input-label" : "TBWLAI-input-full"),
      value: Value,
      onChange: onChange,
      step: "any"
    }), PaintLabel()), DisplayMinMax ? /*#__PURE__*/React__default['default'].createElement("span", {
      className: "TBWLAI-footer"
    }, "(Min:", Min, " Max: ", Max, " )") : null);else if (props.KeepSpaceWhenHidden) return /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        visibility: "hidden"
      },
      className: "TBWLAI-container"
    });else return null;
  }

  function Cell(props) {
    if (props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        style: {
          backgroundColor: props.BackgroundColor,
          padding: "5px",
          overflow: "hidden",
          width: '240px'
        }
      }, props.children);
    } else return null;
  }

  function Col(props) {
    return /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        flexBasis: 0,
        flexGrow: 1,
        width: '100%',
        padding: '0 15px',
        position: 'relative'
      },
      className: props.className
    }, props.children);
  }

  function DynamicContainer(props) {
    if (!props.Visible || props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: props.className
      }, props.children);
    } else if (props.KeepSpaceWhenHidden) return /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        visibility: "hidden"
      },
      className: props.className
    });else return null;
  }

  function DynamicContainerWithLabel(props) {
    if (!props.Visible || props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "SubHeader"
      }, /*#__PURE__*/React__default['default'].createElement("h1", {
        className: "SubHeaderTitle"
      }, props.Title)), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "SubContainer"
      }, props.children));
    } else return null;
  }

  function DynamicLabel(props) {
    if (!props.Visible || props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: props.className
      }, props.Text);
    } else return null;
  }

  function DynamicRow(props) {
    if (!props.Visible || props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "row",
        style: {
          margin: "0px",
          padding: "5px 0",
          backgroundColor: props.backgroundColor,
          borderTop: "Solid #e5e5e5 1px"
        }
      }, /*#__PURE__*/React__default['default'].createElement(Col, {
        className: "col-3 LeftOpCondLabel"
      }, props.Label), /*#__PURE__*/React__default['default'].createElement(Col, null, props.children));
    } else return null;
  }

  var css_248z$6 = "/* start of css for checkbox with error/required class */\r\n\r\ninput[type=checkbox].checkbox-error-css {\r\n    -moz-appearance: none;\r\n    -o-appearance: none;\r\n    outline: none;\r\n    content: none;\r\n}\r\n\r\ninput[type=checkbox].checkbox-error-css:before {\r\n    content: \"\\f00c\";\r\n    color: transparent !important;\r\n    display: block;\r\n    width: 12px;\r\n    height: 12px;\r\n    border: 1px solid red;\r\n    margin-right: 5px;\r\n}\r\n\r\ninput[type=checkbox].checkbox-error-css:checked:before {\r\n    color: red !important;\r\n}\r\n\r\n/* end of css for check box css */";
  styleInject(css_248z$6);

  var SimpleCheckbox = function SimpleCheckbox(props) {
    var PropName = props.PropName,
        RulesJSON = props.RulesJSON,
        DoNotTranslate = props.DoNotTranslate,
        onValueChanged = props.onValueChanged,
        className = props.className,
        _props$hideLabel = props.hideLabel,
        hideLabel = _props$hideLabel === void 0 ? false : _props$hideLabel;

    var GetProperty = function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);
    };

    var ValueProp = GetProperty(PropName);
    var VisibleProp = GetProperty(PropName + ".VISIBLE");
    var EnableProp = GetProperty(PropName + ".ENABLED");
    var IsValidProp = GetProperty(PropName + ".VALID");

    var handleChange = function handleChange() {
      onValueChanged([{
        Name: PropName,
        Value: ValueProp.Value === "FALSE" ? "TRUE" : "FALSE"
      }]);
    };

    var GetLabel = function GetLabel() {
      if (DoNotTranslate) {
        var PropDescription;

        if (ValueProp && ValueProp.Values) {
          PropDescription = ValueProp.Values.map(function (data) {
            return data;
          });
          return PropDescription && PropDescription[0].Attributes && PropDescription[0].Attributes.Description;
        }
      } else {
        return /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
          id: props.PropName
        });
      }
    };

    if ((!VisibleProp || VisibleProp && VisibleProp.Value === "TRUE") && ValueProp) {
      return /*#__PURE__*/React__default['default'].createElement("label", {
        style: {
          fontSize: "0.95rem"
        },
        className: className
      }, /*#__PURE__*/React__default['default'].createElement("input", {
        className: IsValidProp && IsValidProp.Value === "FALSE" ? "checkbox-error-css" : "",
        id: "ctrl" + props.PropName,
        style: {
          marginRight: "5px"
        },
        type: "checkbox",
        name: props.PropName,
        onChange: handleChange,
        checked: ValueProp.Value === "TRUE" ? true : false,
        disabled: EnableProp && EnableProp.Value === "FALSE" ? true : false
      }), !hideLabel && GetLabel());
    } else return null;
  };

  var ImageFolderPath$1 = '/Images/';

  function SimpleImage(props) {
    var _useState = React.useState(''),
        _useState2 = _slicedToArray(_useState, 2),
        ImagePath = _useState2[0],
        SetImagePath = _useState2[1];

    React.useEffect(function () {
      var SelectedValue;
      if (props.Prop) SelectedValue = props.Prop.Value;

      if (SelectedValue) {
        var ImageValue = props.Prop.Values.find(function (value) {
          return value.Value === SelectedValue;
        });
        SetImagePath(ImageFolderPath$1 + ImageValue.Attributes.Image);
      } // eslint-disable-next-line react-hooks/exhaustive-deps

    }, [props.Prop]);
    return /*#__PURE__*/React__default['default'].createElement("img", {
      alt: "ImageAlt",
      src: ImagePath
    });
  }

  function TableColumn(props) {
    if (typeof props.Visible === "undefined" || typeof props.Visible !== "undefined" && props.Visible.Value === "TRUE") {
      return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("div", {
        style: {
          backgroundColor: props.BackgroundColor,
          height: "40px",
          lineHeight: "40px",
          textAlign: "center",
          width: "250px"
        }
      }, props.Header), props.children);
    } else return null;
  }

  var SimpleTagDescription = function SimpleTagDescription(props) {
    var propName = props.propName,
        RulesJSON = props.RulesJSON,
        isLabel = props.isLabel,
        unitahriRounding = props.unitahriRounding,
        ahriRounding = props.ahriRounding,
        unitConversion = props.unitConversion,
        unitcode = props.unitcode,
        unitPropName = props.unitPropName,
        GetAHRIDigits = props.GetAHRIDigits;

    var getDescription = function getDescription(propName) {
      var PropData = workflowuiGlobalfunctions.GetProp(propName, RulesJSON);
      var PropDescription;

      if (isLabel === "true") {
        if (ahriRounding) {
          return unitConversion ? handleUnitConversion(PropData.Value) : GetAHRIDigits && GetAHRIDigits(PropData.Value, ahriRounding);
        }

        return PropData ? PropData.Value === "FALSE" ? "No" : PropData.Value === "TRUE" ? "Yes" : unitConversion ? checkUserTempUnit(PropData.Value) : PropData.Value : "";
      } else {
        if (PropData && PropData.Values) {
          PropDescription = PropData.Values.find(function (data) {
            return data.Value === PropData.Value;
          });
        }

        return PropDescription && PropDescription.Attributes && PropDescription.Attributes.Description;
      }
    };

    var handleUnitConversion = function handleUnitConversion(value) {
      var unitProp = workflowuiGlobalfunctions.GetProp(unitPropName, RulesJSON);
      return GetAHRIDigits && GetAHRIDigits(unitcode === unitProp.Value ? value : ngecatUnitsconversion.GetMetricValue(value, unitcode), ahriRounding);
    };

    var checkUserTempUnit = function checkUserTempUnit(value) {
      var propUnit = workflowuiGlobalfunctions.GetProp("User_sTemperatureUnit", RulesJSON);
      return propUnit.Value === "F" ? value : GetAHRIDigits && GetAHRIDigits((value - 32) * 5 / 9, unitahriRounding);
    };

    return /*#__PURE__*/React__default['default'].createElement("label", {
      id: "Ctrl".concat(propName)
    }, props.NeedToTranslate ? /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: workflowuiGlobalfunctions.FormatTransKey(getDescription(propName))
    }) : /*#__PURE__*/React__default['default'].createElement("span", null, getDescription(propName)));
  };

  function SimpleLabelWithCurrency(props) {
    var prop = GetProperty(props.PropName);

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function GetPriceDollar(Value) {
      return " ".concat(!!Value ? "$ ".concat(Value) : "");
    }

    function getMLPValue() {
      if (!prop) {
        return null;
      } else if (!prop.Value) {
        return /*#__PURE__*/React__default['default'].createElement("span", {
          id: "ctrl".concat(props.PropName)
        }, "$ 0");
      }

      return /*#__PURE__*/React__default['default'].createElement("span", {
        id: "ctrl".concat(props.PropName)
      }, prop && prop.Value && "$ ".concat(prop.Value));
    }

    if (props.isValue) {
      return /*#__PURE__*/React__default['default'].createElement("label", {
        className: "currency-label",
        id: "ctrl".concat(props.PropName)
      }, prop && "$ ".concat(prop.Value));
    } else {
      return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, props.MLPValue ? getMLPValue() : /*#__PURE__*/React__default['default'].createElement("label", {
        className: "currency-label",
        id: "ctrl".concat(props.PropName)
      }, "  ", prop && !!prop.Value ? props.PriceDollar ? props.IsValueArray ? prop.Values.map(function (value, index) {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "".concat(props.PropName, " priceDollor ").concat('CostColumn_' + props.OptionName + '_' + index)
        }, GetPriceDollar(value.Attributes.MLP));
      }) : /*#__PURE__*/React__default['default'].createElement("div", {
        className: "".concat(props.PropName, " priceDollor-content")
      }, GetPriceDollar(prop.Values[0].Attributes.MLP)) : null : null));
    }
  }

  var css_248z$7 = ".MSG-Container {\t\r\n  padding: 10px 15px;\t\r\n  display: block;\t\r\n  width: 100%;\t\r\n  border-radius: 5px;\t\r\n  margin-bottom: 10px;\t\r\n  border: 1px solid #E5E5E5;\t\r\n  background-color: #fff;\t\r\n  box-sizing: border-box;\t\r\n}\t\r\n.MSG-Container > p {\t\r\n  margin: 0;  \t\r\n  display: flex;\t\r\n}\t\r\n.MSG-Container > p > .iconLeft {\t\r\n  margin-right: 15px;\t\r\n  display: inline-block;\t\r\n  vertical-align: middle;\t\r\n}\t\r\n.MSG-Container > p > .iconLeft > img{\t\r\n  width: 16px;\t\r\n  height: 16px;\t\r\n} ";
  styleInject(css_248z$7);

  var ImageFolderPath$2 = '/Images/';

  function MessageTextArea(props) {
    var valueProp = GetProperty(props.PropName);

    function GetMessageImage(props, value) {
      if (props.PropName.toUpperCase().indexOf(".MSG_ERROR") >= 0) {
        return "alert.png";
      } else if (props.PropName.toUpperCase().indexOf(".MSG_INFO") >= 0) {
        return value.Attributes.Note === "WARNING" ? "alert.png" : "success.png";
      } else if (props.PropName.toUpperCase().indexOf(".MSG_WARNING") >= 0) {
        return "warning.png";
      } else if (props.PropName.toUpperCase().indexOf(".MSG_QCREASON") >= 0) {
        return "success.png";
      } else {
        return null;
      }
    }

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function getLineDelimiterValue(txtVal) {
      return txtVal.split(props.LineDelimiter).map(function (str) {
        return /*#__PURE__*/React__default['default'].createElement("p", null, str);
      });
    }

    function getIcon(value) {
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: "iconLeft"
      }, /*#__PURE__*/React__default['default'].createElement("img", {
        src: "".concat(ImageFolderPath$2).concat(GetMessageImage(props, value)),
        alt: props.Text
      }));
    }

    function getTextElement(value) {
      return props.LineDelimiter ? /*#__PURE__*/React__default['default'].createElement("div", {
        className: "MessageTextArea"
      }, getIcon(value), getLineDelimiterValue(value.Value)) : /*#__PURE__*/React__default['default'].createElement("p", {
        className: "MessageTextArea"
      }, getIcon(value), value.Value);
    }

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, valueProp && !!valueProp.Value ? valueProp.Values.map(function (value, idx) {
      if (value.State === 2) {
        return null;
      } else {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: "MSG-Container",
          key: idx
        }, getTextElement(value));
      }
    }) : null);
  }

  var StyledTableCell = core$1.withStyles(function (theme) {
    return {
      head: {
        backgroundColor: "#091d64",
        color: theme.palette.common.white
      },
      body: {
        fontSize: 14
      }
    };
  })(core$1.TableCell);
  var StyledTableRow = core$1.withStyles(function (theme) {
    return {
      root: {
        '&:nth-of-type(odd)': {
          backgroundColor: theme.palette.background["default"]
        }
      }
    };
  })(core$1.TableRow);
  var useStyles = core$1.makeStyles({
    root: {
      width: '100%',
      overflowX: 'auto'
    },
    table: {
      minWidth: 700
    },
    tableWrapper: {
      maxHeight: 440,
      overflow: 'auto'
    }
  });

  function TableWithQuestionControl(props) {
    var classes = useStyles();

    function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, props.RulesJSON);
    }

    function RenderTableBody() {
      return props.PropNames.map(function (PropName, idx) {
        var VisibleProp = GetProperty(PropName + ".VISIBLE");
        var prop = GetProperty(PropName);
        var Visible = null;
        if (VisibleProp) Visible = VisibleProp.Value;

        if (Visible === "TRUE") {
          return /*#__PURE__*/React__default['default'].createElement(StyledTableRow, {
            key: idx,
            "data-propname": PropName
          }, /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
            align: "left"
          }, /*#__PURE__*/React__default['default'].createElement("div", {
            className: "customVerticalRadio"
          }, /*#__PURE__*/React__default['default'].createElement(SimpleRadioButtonGroup, {
            PropName: PropName,
            RulesJSON: props.RulesJSON,
            onValueChanged: props.onNewAssignment,
            vertical: false,
            DoNotTranslate: true
          }))), /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
            align: "left"
          }, RenderTableCell(prop, "Question", null)), /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
            align: "left"
          }, RenderTableCell(prop, null, "Reference")));
        } else return null;
      });
    }

    function RenderTableCell(prop, Question, Reference) {
      return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, prop ? prop.Values.map(function (value, index) {
        return /*#__PURE__*/React__default['default'].createElement("span", {
          key: index
        }, value.Attributes[Question ? Question : Reference]);
      }) : null);
    }

    return /*#__PURE__*/React__default['default'].createElement(core$1.Paper, {
      className: "root",
      style: {
        margin: "10px"
      },
      id: "ctrlQuestionaireTable"
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: classes.tableWrapper
    }, /*#__PURE__*/React__default['default'].createElement(core$1.Table, {
      className: "table",
      "aria-label": "customized table"
    }, /*#__PURE__*/React__default['default'].createElement(core$1.TableHead, null, /*#__PURE__*/React__default['default'].createElement(core$1.TableRow, null, /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
      component: "th",
      align: "left"
    }, "Yes/No"), /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
      component: "th",
      align: "left"
    }, "Questions"), /*#__PURE__*/React__default['default'].createElement(StyledTableCell, {
      component: "th",
      align: "left"
    }, "Reference#"))), /*#__PURE__*/React__default['default'].createElement(core$1.TableBody, null, RenderTableBody()))));
  }

  var HorizontalCheckboxGroupWithImage = function HorizontalCheckboxGroupWithImage(props) {
    var PropName = props.PropName,
        Class = props.Class,
        RulesJSON = props.RulesJSON,
        isLabel = props.isLabel,
        onValueChanged = props.onValueChanged,
        _props$checkEnabledRu = props.checkEnabledRule,
        checkEnabledRule = _props$checkEnabledRu === void 0 ? false : _props$checkEnabledRu,
        _props$isRedHighlight = props.isRedHighlight,
        isRedHighlight = _props$isRedHighlight === void 0 ? false : _props$isRedHighlight;
    var ValueProp = workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);

    var _useState = React.useState(true),
        _useState2 = _slicedToArray(_useState, 2),
        Enabled = _useState2[0],
        SetEnabled = _useState2[1];

    var ENABLED = '.ENABLED';
    React.useEffect(function () {
      if (checkEnabledRule) {
        var EnableProp = workflowuiGlobalfunctions.GetProp(PropName + ENABLED, RulesJSON);

        if (EnableProp) {
          SetEnabled(EnableProp.Value === "TRUE" ? true : false);
        } else {
          SetEnabled(true);
        }
      }
    }, [props.RulesJSON]);

    var handleChange = function handleChange() {
      onValueChanged([{
        Name: props.PropName,
        Value: ValueProp.Value === "FALSE" ? "TRUE" : "FALSE"
      }]);
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "IWLCG_Wrapper ".concat(Class)
    }, ValueProp && ValueProp.Values.map(function (value, index) {
      if (value.Value === "TRUE") {
        var enableRedHighlight = isRedHighlight && value.State === 2 && workflowuiGlobalfunctions.getBooleanValue(ValueProp.Value);
        return /*#__PURE__*/React__default['default'].createElement("div", {
          onClick: handleChange,
          key: index,
          className: classNames__default['default']("IWLCG-tile", enableRedHighlight && "IWLCG-notAllow", !Enabled && "IWLCG_Disabled"),
          id: "ctrl" + ValueProp.Name + value.Value
        }, /*#__PURE__*/React__default['default'].createElement("img", {
          src: "/Images/".concat(value.Attributes.Image),
          alt: "icon"
        }), isLabel && /*#__PURE__*/React__default['default'].createElement("span", {
          className: "IWLCG-Label"
        }, /*#__PURE__*/React__default['default'].createElement("input", {
          type: "checkbox",
          onChange: handleChange,
          checked: ValueProp.AssignedValue === value.Value
        }), value.Attributes.Description), /*#__PURE__*/React__default['default'].createElement("div", {
          className: ValueProp.AssignedValue === value.Value ? "IWLCG-Circle-Selected" : "IWLCG-Circle-NotSelected"
        }));
      }
    }));
  };

  var HorizontalRadioGroupWithImage = function HorizontalRadioGroupWithImage(props) {
    var PropName = props.PropName,
        RulesJSON = props.RulesJSON,
        unCheckRadio = props.unCheckRadio,
        onValueChanged = props.onValueChanged,
        isNotAllowedVisible = props.isNotAllowedVisible,
        isRequired = props.isRequired;
    var ValueProp = workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);

    var ErrorMsg = function ErrorMsg() {
      var errFlag = false;
      ValueProp && ValueProp.Values && ValueProp.Values.forEach(function (value) {
        value.Attributes.VISIBLE === "TRUE" && value.State === 1 ? errFlag = false : errFlag = true;
      });
      return errFlag;
    };

    var handleChange = function handleChange(value, index) {
      onValueChanged([{
        Name: ValueProp.Name,
        Value: value.Value === ValueProp.AssignedValue && unCheckRadio ? "NONE" : ValueProp.Values[index].Value
      }]);
    };

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "IWLCG_Wrapper"
    }, ValueProp && ValueProp.Values ? ValueProp.Values.map(function (value, index) {
      if (value.Attributes.VISIBLE === "TRUE") {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          onClick: function onClick() {
            return handleChange(value, index);
          },
          key: index,
          className: "IWLCG-tile ".concat(value.State === 1 ? "" : isNotAllowedVisible ? "IWLCG-notAllow" : "disabled"),
          id: "ctrl" + ValueProp.Name + value.Value
        }, /*#__PURE__*/React__default['default'].createElement("img", {
          src: "/Images/".concat(value.Attributes.Image),
          alt: "icon"
        }), props.isLabel && /*#__PURE__*/React__default['default'].createElement("span", {
          className: "IWLCG-Label"
        }, value.Attributes.Description), /*#__PURE__*/React__default['default'].createElement("div", {
          className: ValueProp.AssignedValue === value.Value ? "IWLCG-Circle-Selected" : "IWLCG-Circle-NotSelected"
        }));
      }
    }) : null), ValueProp && ValueProp.AssignedValue === "NONE" && !ErrorMsg() && isRequired && /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        'color': 'red'
      }
    }, "This Field is required"));
  };

  var SimpleLabelWithImage = function SimpleLabelWithImage(props) {
    var className = props.className,
        noSpaceLeft = props.noSpaceLeft,
        ImageName = props.ImageName,
        Text = props.Text,
        children = props.children;
    return /*#__PURE__*/React__default['default'].createElement("label", {
      className: "SimpleLabel ".concat(className)
    }, !noSpaceLeft && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "iconLeft"
    }, ImageName && /*#__PURE__*/React__default['default'].createElement("img", {
      src: "/Images/".concat(ImageName),
      alt: Text
    })), Text, children);
  };

  var css_248z$8 = ".RowDiv {\r\n    width:100%;\r\n    display: block;\r\n    clear:both;    \r\n    overflow:hidden;\r\n}\r\n.LiGroup {\r\n    margin-top: 10px;\r\n}\r\n.SRBG-Label-vertical-currency {\r\n    margin: 10px;\r\n    font-size: 0.92rem;\r\n    float:left;\r\n}\r\n.SRBG-Label-horizontal {\r\n    margin: 10px;\r\n    font-size: 14px;\r\n    display: block;\r\n    float: left;\r\n}\r\n.SRBG-Label-vertical-currency:hover, .SRBG-Label-horizontal:hover {\r\n    cursor: pointer;\r\n}\r\n.SRBG-radio {\r\n    margin-right: 5px;\r\n}\r\n.SRBG-radio-notAllowed {\r\n    color: #cc0000;\r\n}\r\n.priceDollor {\r\n    margin-top: 13px;\r\n    margin-right: 5px;\r\n    font-weight: 700;\r\n    font-weight: bold;\r\n    float: right;\r\n}\r\n";
  styleInject(css_248z$8);

  var SimpleRadioButtonWithCurrencyGroup = function SimpleRadioButtonWithCurrencyGroup(props) {
    var PropName = props.PropName,
        RulesJSON = props.RulesJSON,
        className = props.className,
        vertical = props.vertical,
        HideNotAllowedValues = props.HideNotAllowedValues,
        DoNotTranslate = props.DoNotTranslate,
        NoteclassName = props.NoteclassName,
        onValueChanged = props.onValueChanged;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        Visibility = _useState2[0],
        SetVisibility = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray(_useState3, 2),
        Prop = _useState4[0],
        SetProp = _useState4[1];

    React.useEffect(function () {
      var VisibleProp = GetProperty(PropName + ".VISIBLE");
      var Prop = GetProperty(PropName);

      if (VisibleProp) {
        SetVisibility(VisibleProp.Value === "TRUE" ? true : false);
      } else {
        SetVisibility(true);
      }

      SetProp(Prop);
    }, [null, RulesJSON]);

    var GetProperty = function GetProperty(PropName) {
      return workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);
    };

    var GetPriceDollar = function GetPriceDollar(Value) {
      return "".concat(!!Value ? "$ ".concat(Value) : "$ 0");
    };

    var GetClassName = function GetClassName() {
      if (className) return className;else if (vertical) return "SRBG-Label-vertical-currency";else return "SRBG-Label-horizontal";
    };

    var handleChange = function handleChange(event) {
      onValueChanged([{
        Name: PropName,
        Value: event.target.value
      }]);
    };

    if (Visibility) {
      return /*#__PURE__*/React__default['default'].createElement("div", null, Prop ? Prop.Values.map(function (value, index) {
        if (HideNotAllowedValues && value.State === 2) return null;else {
          return /*#__PURE__*/React__default['default'].createElement("div", {
            key: index,
            className: "RowDiv"
          }, /*#__PURE__*/React__default['default'].createElement("div", {
            id: "ctrl" + PropName,
            className: (value.State === 2 ? "SRBG-radio-notAllowed " : "") + GetClassName()
          }, /*#__PURE__*/React__default['default'].createElement("input", {
            id: "ctrl" + PropName + value.Value,
            className: "SRBG-radio",
            type: "radio",
            name: PropName,
            value: value.Value,
            onChange: handleChange,
            checked: Prop.AssignedValue === value.Value ? true : false
          }), DoNotTranslate ? /*#__PURE__*/React__default['default'].createElement("span", null, value.Attributes.Description) : /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
            id: workflowuiGlobalfunctions.FormatTransKey(PropName + "|" + value.Attributes.Description)
          }), !!value.Attributes.Note && vertical ? /*#__PURE__*/React__default['default'].createElement("div", {
            className: "LiGroup"
          }, " ", value.Attributes.Note.split("||").map(function (value, index) {
            return /*#__PURE__*/React__default['default'].createElement("li", {
              key: index,
              className: NoteclassName
            }, value);
          })) : ""), /*#__PURE__*/React__default['default'].createElement("div", {
            className: "priceDollor"
          }, GetPriceDollar(value.Attributes.MLP)));
        }
      }) : null);
    } else return null;
  };

  var SimpleHorizontalTabs = function SimpleHorizontalTabs(props) {
    var RulesJSON = props.RulesJSON,
        TabsJson = props.TabsJson;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        value = _useState2[0],
        setValue = _useState2[1];

    var handleChange = function handleChange(event, newValue) {
      setValue(newValue);
    };

    var VisibleTab = function VisibleTab(PropName) {
      var VisibleProp = workflowuiGlobalfunctions.GetProp(PropName, RulesJSON);
      return VisibleProp && VisibleProp.Value === "TRUE";
    };

    var RenderTabBody = function RenderTabBody(item) {
      var TabConent = item.Component;
      return /*#__PURE__*/React__default['default'].createElement(TabConent, item.Props);
    };

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, /*#__PURE__*/React__default['default'].createElement(Tabs__default['default'], {
      value: value,
      onChange: handleChange,
      indicatorColor: "primary",
      "aria-label": "simple tabs example",
      className: "horizantal-tabs"
    }, TabsJson.map(function (item, idx) {
      return VisibleTab(item.propName) && /*#__PURE__*/React__default['default'].createElement(Tab__default['default'], {
        id: "ctrl".concat(item.propName),
        label: item.Name,
        value: idx,
        key: idx,
        "aria-labelledby": item.Name
      });
    })), TabsJson.map(function (item, idx) {
      return VisibleTab(item.propName) && /*#__PURE__*/React__default['default'].createElement(TabPanel, {
        value: value,
        index: idx,
        key: idx
      }, RenderTabBody(item));
    }));
  };

  var TabPanel = function TabPanel(props) {
    var children = props.children,
        value = props.value,
        index = props.index;
    return /*#__PURE__*/React__default['default'].createElement("div", _extends({
      role: "tabpanel",
      hidden: value !== index,
      id: "simple-tabpanel-".concat(index),
      "aria-labelledby": "simple-tab-".concat(index)
    }, props), value === index && /*#__PURE__*/React__default['default'].createElement("div", {
      p: 3
    }, children));
  };

  var SimpleRuleButton = function SimpleRuleButton(props) {
    var id = props.id,
        icon = props.icon,
        propName = props.propName,
        name = props.name,
        guiPropName = props.guiPropName,
        RulesJSON = props.RulesJSON,
        onClick = props.onClick;
    var enableProp = workflowuiGlobalfunctions.GetProp("".concat(propName, ".ENABLED"), RulesJSON);

    var handleClick = function handleClick() {
      onClick([{
        Name: propName,
        Value: "TRUE"
      }, {
        Name: guiPropName,
        Value: guid().replace(/-/g, "")
      }]);
    };

    var guid = function guid() {
      var s4 = function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };

      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    };

    return /*#__PURE__*/React__default['default'].createElement("button", {
      id: id,
      className: enableProp && enableProp.Value === "FALSE" ? "eButtondisable" : "eButtonPrimary",
      disabled: enableProp && enableProp.Value === "FALSE" ? true : false,
      onClick: handleClick
    }, icon && /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: icon
    }), name);
  };

  var Button = function Button(props) {
    var id = props.id,
        disabled = props.disabled,
        onClick = props.onClick,
        icon = props.icon,
        name = props.name,
        _props$styles = props.styles,
        styles = _props$styles === void 0 ? '' : _props$styles;

    var onClickHandler = function onClickHandler(event) {
      onClick && onClick(event);
    };

    return /*#__PURE__*/React__default['default'].createElement("button", {
      id: id,
      className: styles,
      disabled: disabled,
      onClick: onClickHandler
    }, icon && /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: icon
    }), name);
  };

  var translation = function translation(id) {
    var defaultMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return /*#__PURE__*/React__default['default'].createElement(reactIntl.FormattedMessage, {
      id: id,
      defaultMessage: defaultMessage,
      values: value
    });
  };

  var saveTagStyles = styles.makeStyles(function (theme) {
    return {
      tagNameContainer: {
        display: "flex",
        flexDirection: "row",
        padding: "2px"
      },
      newProjectSeletionContainer: {
        display: "flex",
        flexDirection: "column"
      },
      disableInput: {
        backgroundColor: "#f5f5f5"
      },
      popper: {
        zIndex: "99999",
        width: "55%",
        top: 'unset',
        left: 'unset'
      },
      paper: {
        "max-height": "170px",
        "min-height": "150px",
        overflowY: "auto"
      },
      noDataAvailable: {
        "row-gap": "10px",
        display: "flex",
        "flex-direction": "column"
      },
      tagNameLabel: {
        margin: "19px 27px 0px 0px",
        width: "40%",
        display: "flex"
      },
      requiredAsterik: {
        color: "#c00000"
      },
      errorMsg: {
        display: "block",
        color: "#c00000",
        margin: "4px 0px"
      },
      searchInputRoot: {
        fontSize: "14px"
      },
      searchInput: {
        width: "100%"
      },
      errorBorder: {
        borderColor: "#c00000 !important"
      },
      nonErrorBorder: {
        borderColor: "#bcbcbc !important"
      },
      tagNameLabelContainer: {
        width: "72%"
      },
      labelRoot: {
        margin: "0px"
      },
      label: {
        fontSize: "14px"
      },
      radioRoot: {
        padding: "0px 2px 1px 0px"
      },
      radioSection: {
        display: "flex",
        flexDirection: "column",
        padding: "8px",
        maxHeight: "250px",
        overflowY: "auto",
        overflowX: "hidden"
      },
      noRecords: {
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100px",
        display: "flex"
      }
    };
  });

  var ProjectTagSelection = function ProjectTagSelection(props) {
    var intl = props.intl,
        _props$projectDataLis = props.projectDataList,
        projectDataList = _props$projectDataLis === void 0 ? [] : _props$projectDataLis,
        _props$tagName = props.tagName,
        tagInfo = _props$tagName === void 0 ? {} : _props$tagName,
        onSaveTagData = props.onSaveTagData,
        onValidation = props.onValidation;
    var _tagInfo$isDisabled = tagInfo.isDisabled,
        isDisabled = _tagInfo$isDisabled === void 0 ? false : _tagInfo$isDisabled,
        _tagInfo$value = tagInfo.value,
        value = _tagInfo$value === void 0 ? "" : _tagInfo$value;

    var _useState = React.useState(),
        _useState2 = _slicedToArray(_useState, 2),
        dataItem = _useState2[0],
        setDataItem = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        displayProjectNames = _useState4[0],
        setDisplayProjectNames = _useState4[1];

    var _useState5 = React.useState(value),
        _useState6 = _slicedToArray(_useState5, 2),
        tagName = _useState6[0],
        setTagName = _useState6[1];

    var _useState7 = React.useState(""),
        _useState8 = _slicedToArray(_useState7, 2),
        existingErrorTagName = _useState8[0],
        setExistingErrorTagName = _useState8[1];

    var _useState9 = React.useState(""),
        _useState10 = _slicedToArray(_useState9, 2),
        searchValue = _useState10[0],
        setSearchValue = _useState10[1];

    var _useState11 = React.useState(""),
        _useState12 = _slicedToArray(_useState11, 2),
        projectError = _useState12[0],
        setProjectError = _useState12[1];

    var _saveTagStyles = saveTagStyles(),
        tagNameContainer = _saveTagStyles.tagNameContainer,
        tagNameLabel = _saveTagStyles.tagNameLabel,
        errorMsg = _saveTagStyles.errorMsg,
        searchInput = _saveTagStyles.searchInput,
        radioRoot = _saveTagStyles.radioRoot,
        tagNameLabelContainer = _saveTagStyles.tagNameLabelContainer,
        radioSection = _saveTagStyles.radioSection,
        labelRoot = _saveTagStyles.labelRoot,
        label = _saveTagStyles.label,
        searchInputRoot = _saveTagStyles.searchInputRoot,
        noRecords = _saveTagStyles.noRecords,
        errorBorder = _saveTagStyles.errorBorder,
        nonErrorBorder = _saveTagStyles.nonErrorBorder,
        requiredAsterik = _saveTagStyles.requiredAsterik,
        disableInput = _saveTagStyles.disableInput;

    var _useState13 = React.useState(false),
        _useState14 = _slicedToArray(_useState13, 2),
        fetchState = _useState14[0],
        setFetchState = _useState14[1];

    React.useEffect(function () {
      var disableSave = false;
      var tagNameStatus = !isDisabled && !tagName;

      if (tagNameStatus || !dataItem) {
        disableSave = true;
      }

      onSaveTagData && onSaveTagData({
        tagName: tagName,
        projectData: dataItem,
        disableSave: disableSave
      });
    }, [tagName, dataItem]);
    React.useEffect(function () {
      if (projectDataList.length > 0) {
        setDisplayProjectNames(projectDataList);
        setFetchState(true);
      }
    }, [projectDataList]);

    var searchProjects = function searchProjects(value) {
      if (value) {
        var result = projectDataList && projectDataList.filter(function (item) {
          return item.ProjectName.toLowerCase().search(value.toLowerCase()) !== -1;
        });
        setDisplayProjectNames(result);
      } else {
        setDisplayProjectNames(projectDataList);
      }
    };

    var validateForm = function validateForm(value) {
      setTagName(value);
      var error = "";

      if (onValidation) {
        error = onValidation(value);
      } else {
        var validations = {
          regExp: /^[^'\"&\/#,<>|\\\\]*$/,
          maxLength: 100
        };
        var validationMessages = {
          nameRequired: workflowuiGlobalfunctions.injectIntlTranslation(intl, "Tagnamerequired", "Tag name required"),
          notAllowedCharacters: workflowuiGlobalfunctions.injectIntlTranslation(intl, "OnlyAlphabetsAndUnderscoreMessage", "Input should contain alphabets and underscore only"),
          maxLengthError: workflowuiGlobalfunctions.injectIntlTranslation(intl, "TextRangeValidationMessage", "Number of characters should be between {0} and {1}").replace('{0}', 1).replace('{1}', 100)
        };
        error = workflowuiGlobalfunctions.validateFormFields(value, validations, validationMessages);
      }

      if (error !== existingErrorTagName) {
        !isDisabled && setExistingErrorTagName(error);
      } else if (!dataItem) {
        setProjectError(workflowuiGlobalfunctions.injectIntlTranslation(intl, "validationAtLeastOneProject", "Please select a Project."));
      }
    };

    var setProjectID = function setProjectID(item) {
      setDataItem(item);
      setProjectError("");
    };

    var onChange = function onChange(_ref) {
      var value = _ref.target.value;
      setSearchValue(value);
      debounce__default['default'](searchProjects(value), 200);
    };

    var isRadioSelected = function isRadioSelected(id) {
      if (dataItem) {
        return dataItem.ProjectID === id;
      }

      return false;
    };

    var showNoRecordsMsg = function showNoRecordsMsg() {
      if (fetchState && displayProjectNames.length <= 0) {
        return /*#__PURE__*/React__default['default'].createElement(Box__default['default'], {
          boxShadow: 3,
          bgcolor: "background.paper"
        }, /*#__PURE__*/React__default['default'].createElement("span", {
          className: noRecords
        }, workflowuiGlobalfunctions.injectIntlTranslation(intl, "NoRecordsAvailable", "No Records Available")));
      }

      return null;
    };

    return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, /*#__PURE__*/React__default['default'].createElement("div", {
      className: tagNameContainer
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: tagNameLabel
    }, /*#__PURE__*/React__default['default'].createElement("span", null, translation("TagName", "Tag Name")), /*#__PURE__*/React__default['default'].createElement("span", {
      className: requiredAsterik
    }, "*")), /*#__PURE__*/React__default['default'].createElement("div", {
      className: tagNameLabelContainer
    }, /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
      className: searchInput,
      value: tagName,
      variant: "outlined",
      InputProps: {
        classes: {
          input: searchInputRoot,
          notchedOutline: existingErrorTagName ? errorBorder : nonErrorBorder,
          disabled: disableInput
        }
      },
      disabled: isDisabled,
      placeholder: workflowuiGlobalfunctions.injectIntlTranslation(intl, "TagName", "Tag Name"),
      name: "tagName",
      margin: 'dense',
      size: 'small',
      onChange: function onChange(event) {
        return validateForm(event.target.value);
      }
    }), /*#__PURE__*/React__default['default'].createElement("span", {
      className: errorMsg
    }, existingErrorTagName))), /*#__PURE__*/React__default['default'].createElement("div", {
      className: tagNameContainer
    }, /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
      className: searchInput,
      variant: "outlined",
      InputProps: {
        classes: {
          input: searchInputRoot,
          notchedOutline: nonErrorBorder
        }
      },
      placeholder: workflowuiGlobalfunctions.injectIntlTranslation(intl, "SearchProject", "Search project here"),
      autoFocus: true,
      margin: 'dense',
      size: 'small',
      value: searchValue,
      onChange: onChange
    })), /*#__PURE__*/React__default['default'].createElement("span", {
      className: errorMsg
    }, projectError), displayProjectNames.length > 0 ? /*#__PURE__*/React__default['default'].createElement(Box__default['default'], {
      boxShadow: 3,
      bgcolor: "background.paper"
    }, /*#__PURE__*/React__default['default'].createElement(List__default['default'], {
      className: radioSection
    }, displayProjectNames.map(function (item) {
      return /*#__PURE__*/React__default['default'].createElement(FormControlLabel__default['default'], {
        id: item.ProjectID,
        value: item.ProjectName,
        classes: {
          root: labelRoot,
          label: label
        },
        control: /*#__PURE__*/React__default['default'].createElement(Radio__default['default'], {
          color: "primary",
          disableRipple: true,
          size: "small",
          classes: {
            root: radioRoot
          },
          checked: isRadioSelected(item.ProjectID)
        }),
        label: item.ProjectName,
        labelPlacement: "end",
        onChange: function onChange() {
          return setProjectID(item);
        }
      });
    }))) : showNoRecordsMsg());
  };

  var ProjectTagSelection$1 = reactIntl.injectIntl( /*#__PURE__*/React.memo(ProjectTagSelection));

  var AutoComplete = function AutoComplete(props) {
    var _props$menuList = props.menuList,
        menuList = _props$menuList === void 0 ? [] : _props$menuList,
        _props$isError = props.isError,
        isError = _props$isError === void 0 ? false : _props$isError,
        validateField = props.validateField,
        field = props.field,
        intl = props.intl;
    var _field$value = field.value,
        value = _field$value === void 0 ? "" : _field$value,
        id = field.id,
        isDisabled = field.isDisabled,
        placeHolder = field.placeHolder,
        validation = field.validation,
        defaultLabel = field.defaultLabel;

    var _saveTagStyles = saveTagStyles(),
        searchInput = _saveTagStyles.searchInput,
        searchInputRoot = _saveTagStyles.searchInputRoot,
        popper = _saveTagStyles.popper,
        errorBorder = _saveTagStyles.errorBorder,
        nonErrorBorder = _saveTagStyles.nonErrorBorder,
        paper = _saveTagStyles.paper,
        noDataAvailable = _saveTagStyles.noDataAvailable;

    var _React$useState = React__default['default'].useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        open = _React$useState2[0],
        setOpen = _React$useState2[1];

    var _React$useState3 = React__default['default'].useState(value),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        textValue = _React$useState4[0],
        setTextValue = _React$useState4[1];

    var _React$useState5 = React__default['default'].useState(menuList),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        autoCompleteList = _React$useState6[0],
        setAutoCompleteList = _React$useState6[1];

    var anchorRef = React__default['default'].useRef(null);
    var prevOpen = React__default['default'].useRef(open);
    var errorClass = isError ? errorBorder : nonErrorBorder;
    React.useEffect(function () {
      setAutoCompleteList(menuList);
    }, [menuList]);
    React.useEffect(function () {
      if (prevOpen.current === true && open === false) {
        anchorRef.current.focus();
      }

      prevOpen.current = open;
    }, [open]);

    var handleClose = function handleClose(event) {
      if (anchorRef.current && anchorRef.current.contains(event.target)) {
        return;
      }

      setOpen(false);
    };

    var handleListKeyDown = function handleListKeyDown(event) {
      if (event.key === 'Tab') {
        event.preventDefault();
        setOpen(false);
      }
    };

    var menuItemSelection = function menuItemSelection(_ref) {
      var event = _ref.event,
          menuItem = _ref.menuItem,
          id = _ref.id;
      setTextValue(menuItem.CustomerName);
      setOpen(false);
      validateField && validateField({
        event: event,
        id: id,
        validation: validation,
        menuItem: menuItem
      });
    };

    var validationAutoComplete = function validationAutoComplete(_ref2) {
      var event = _ref2.event,
          id = _ref2.id,
          validation = _ref2.validation;
      var value = event.target.value;
      setTextValue(value);
      value && setOpen(true);
      validateField && validateField({
        event: event,
        id: id,
        validation: validation
      });
    };

    var renderMenuList = function renderMenuList(menuList) {
      if (menuList && menuList.length > 0) {
        return menuList.map(function (menuItem) {
          return /*#__PURE__*/React__default['default'].createElement(MenuItem__default['default'], {
            onClick: function onClick(event) {
              return menuItemSelection({
                event: event,
                menuItem: menuItem,
                id: id,
                validation: validation
              });
            }
          }, menuItem.CustomerName);
        });
      }

      return /*#__PURE__*/React__default['default'].createElement(MenuItem__default['default'], {
        className: noDataAvailable
      }, /*#__PURE__*/React__default['default'].createElement(ErrorOutlineIcon__default['default'], {
        fontSize: "large"
      }), workflowuiGlobalfunctions.injectIntlTranslation(intl, "GridNoData"));
    };

    return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
      inputRef: anchorRef,
      autoComplete: "off",
      className: searchInput,
      value: textValue || value,
      variant: "outlined",
      InputProps: {
        classes: {
          input: searchInputRoot,
          notchedOutline: errorClass
        }
      },
      disabled: isDisabled,
      placeholder: workflowuiGlobalfunctions.injectIntlTranslation(intl, placeHolder, defaultLabel),
      name: id,
      id: id,
      margin: 'dense',
      size: 'small',
      type: "search",
      onChange: function onChange(event) {
        return validationAutoComplete({
          event: event,
          id: id,
          validation: validation
        });
      }
    }), /*#__PURE__*/React__default['default'].createElement(Popper__default['default'], {
      open: open && textValue,
      anchorEl: anchorRef.current,
      role: undefined,
      transition: true,
      disablePortal: true,
      className: popper
    }, function (_ref3) {
      var TransitionProps = _ref3.TransitionProps,
          placement = _ref3.placement;
      return /*#__PURE__*/React__default['default'].createElement(Grow__default['default'], _extends({}, TransitionProps, {
        style: {
          transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'
        }
      }), /*#__PURE__*/React__default['default'].createElement(Paper__default['default'], {
        className: paper
      }, /*#__PURE__*/React__default['default'].createElement(ClickAwayListener__default['default'], {
        onClickAway: handleClose
      }, /*#__PURE__*/React__default['default'].createElement(MenuList__default['default'], {
        id: "menu-list-grow",
        onKeyDown: handleListKeyDown
      }, renderMenuList(autoCompleteList.filter(function (menuList) {
        return menuList.CustomerName.toLowerCase().search(value.toLowerCase()) >= 0;
      }))))));
    }));
  };

  AutoComplete.propTypes = {
    intl: reactIntl.intlShape.isRequired
  };
  var AutoComplete$1 = reactIntl.injectIntl(AutoComplete);

  var defaultValidation = {
    regExp: /^[^'\"&\/#,<>|\\\\]*$/,
    maxLength: 100
  };

  var defaultValidationMessages = function defaultValidationMessages(intl) {
    return {
      nameRequired: workflowuiGlobalfunctions.injectIntlTranslation(intl, "FieldRequired", "This field is required"),
      notAllowedCharacters: workflowuiGlobalfunctions.injectIntlTranslation(intl, "SpecialCharactersNotAllowed", "Special characters are not allowed."),
      maxLengthError: workflowuiGlobalfunctions.injectIntlTranslation(intl, "MaxLengthError100", "Number of characters should not be more than 100")
    };
  };

  var projectNameValidation = function projectNameValidation(value, intl) {
    return workflowuiGlobalfunctions.validateFormFields(value, defaultValidation, defaultValidationMessages(intl));
  };

  var tagNameValidation = function tagNameValidation(value, intl) {
    var validationMessages = {
      nameRequired: workflowuiGlobalfunctions.injectIntlTranslation(intl, "Tagnamerequired", "Tag name required"),
      notAllowedCharacters: workflowuiGlobalfunctions.injectIntlTranslation(intl, "OnlyAlphabetsAndUnderscoreMessage", "Input should contain alphabets and underscore only"),
      maxLengthError: workflowuiGlobalfunctions.injectIntlTranslation(intl, "TextRangeValidationMessage", "Number of characters should be between {0} and {1}").replace('{0}', 1).replace('{1}', 100)
    };
    return workflowuiGlobalfunctions.validateFormFields(value, defaultValidation, validationMessages);
  };

  var customerNameValidation = function customerNameValidation(value, intl) {
    var validationMessages = defaultValidationMessages(intl);
    validationMessages.nameRequired = "";
    return workflowuiGlobalfunctions.validateFormFields(value, defaultValidation, validationMessages);
  };

  var companyNameValidation = function companyNameValidation(value, intl) {
    var validationMessages = defaultValidationMessages(intl);
    validationMessages.nameRequired = "";
    return workflowuiGlobalfunctions.validateFormFields(value, defaultValidation, validationMessages);
  };

  var emailValidation = function emailValidation(value, intl) {
    var validations = {
      regExp: /^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i,
      maxLength: 50
    };
    var validationMessages = {
      nameRequired: "",
      notAllowedCharacters: workflowuiGlobalfunctions.injectIntlTranslation(intl, "EmailValidationMessage", "Please enter a valid email address."),
      maxLengthError: workflowuiGlobalfunctions.injectIntlTranslation(intl, "MaxLengthError50", "Number of characters should not be more than 50")
    };
    return workflowuiGlobalfunctions.validateFormFields(value, validations, validationMessages);
  };

  var contactNumberValidation = function contactNumberValidation(value, intl) {
    var contactRegExp = /^[\+-]?(([0-9\\(\\)]{1})[ ]?[\+]?[ ]?[-]?[ ]?[\\(]?[ ]?[\\)]?[ ]?){1,20}(?=\r?$)/;

    if (!value.match(contactRegExp)) {
      return workflowuiGlobalfunctions.injectIntlTranslation(intl, "InvalidPhoneMessage", "Only -,(,) and numbers are accepted. Less than 20 numbers should be entered");
    }

    return "";
  };

  var fieldKeys = {
    isVisible: "isVisible",
    isDisabled: "isDisabled",
    isAutoComplete: "isAutoComplete",
    label: "label",
    id: "id",
    value: "value",
    error: "error",
    placeHolder: "placeHolder",
    validation: "validation",
    isRequired: "isRequired",
    defaultLabel: "defaultLabel"
  };
  var init = function init() {
    return addProjectFields();
  };
  var addProjectReducer = function addProjectReducer(state, action) {
    switch (action.type) {
      case 'updateFields':
        return action.fields;

      case 'reset':
        return addProjectFields();

      default:
        throw new Error();
    }
  };
  var fieldType = {
    ProjectName: "ProjectName",
    TagName: "TagName",
    CustomerName: "CustomerName",
    ContactName: "ContactName",
    ContactEmail: "ContactEmail",
    ContactNumber: "ContactNumber"
  };
  var addProjectFields = function addProjectFields() {
    var _ProjectName, _TagName, _CustomerName, _ContactName, _ContactEmail, _ContactNumber, _ref;

    var ProjectName = fieldType.ProjectName,
        TagName = fieldType.TagName,
        CustomerName = fieldType.CustomerName,
        ContactName = fieldType.ContactName,
        ContactEmail = fieldType.ContactEmail,
        ContactNumber = fieldType.ContactNumber;
    var isVisible = fieldKeys.isVisible,
        isDisabled = fieldKeys.isDisabled,
        isAutoComplete = fieldKeys.isAutoComplete,
        label = fieldKeys.label,
        id = fieldKeys.id,
        value = fieldKeys.value,
        error = fieldKeys.error,
        placeHolder = fieldKeys.placeHolder,
        validation = fieldKeys.validation,
        isRequired = fieldKeys.isRequired,
        defaultLabel = fieldKeys.defaultLabel;
    return _ref = {}, _defineProperty(_ref, ProjectName, (_ProjectName = {}, _defineProperty(_ProjectName, isVisible, true), _defineProperty(_ProjectName, isDisabled, false), _defineProperty(_ProjectName, isAutoComplete, false), _defineProperty(_ProjectName, isRequired, true), _defineProperty(_ProjectName, label, "NewProjectProjectName"), _defineProperty(_ProjectName, defaultLabel, "Project Name"), _defineProperty(_ProjectName, id, ProjectName), _defineProperty(_ProjectName, value, "Project " + workflowuiGlobalfunctions.RandomNumber()), _defineProperty(_ProjectName, error, ""), _defineProperty(_ProjectName, placeHolder, "NewProjectProjectName"), _defineProperty(_ProjectName, validation, projectNameValidation), _ProjectName)), _defineProperty(_ref, TagName, (_TagName = {}, _defineProperty(_TagName, isVisible, false), _defineProperty(_TagName, isDisabled, false), _defineProperty(_TagName, isAutoComplete, false), _defineProperty(_TagName, isRequired, true), _defineProperty(_TagName, label, "TagName"), _defineProperty(_TagName, defaultLabel, "Tag Name"), _defineProperty(_TagName, id, TagName), _defineProperty(_TagName, value, ""), _defineProperty(_TagName, error, ""), _defineProperty(_TagName, placeHolder, "TagName"), _defineProperty(_TagName, validation, tagNameValidation), _TagName)), _defineProperty(_ref, CustomerName, (_CustomerName = {}, _defineProperty(_CustomerName, isVisible, true), _defineProperty(_CustomerName, isDisabled, false), _defineProperty(_CustomerName, isAutoComplete, true), _defineProperty(_CustomerName, isRequired, false), _defineProperty(_CustomerName, label, "CustomerName"), _defineProperty(_CustomerName, defaultLabel, "Customer Name"), _defineProperty(_CustomerName, id, CustomerName), _defineProperty(_CustomerName, value, ""), _defineProperty(_CustomerName, error, ""), _defineProperty(_CustomerName, placeHolder, "CustomerName"), _defineProperty(_CustomerName, validation, customerNameValidation), _CustomerName)), _defineProperty(_ref, ContactName, (_ContactName = {}, _defineProperty(_ContactName, isVisible, true), _defineProperty(_ContactName, isDisabled, false), _defineProperty(_ContactName, isAutoComplete, false), _defineProperty(_ContactName, isRequired, false), _defineProperty(_ContactName, label, "CompanyName"), _defineProperty(_ContactName, defaultLabel, "Contact Name"), _defineProperty(_ContactName, id, ContactName), _defineProperty(_ContactName, value, ""), _defineProperty(_ContactName, error, ""), _defineProperty(_ContactName, placeHolder, "CompanyName"), _defineProperty(_ContactName, validation, companyNameValidation), _ContactName)), _defineProperty(_ref, ContactEmail, (_ContactEmail = {}, _defineProperty(_ContactEmail, isVisible, true), _defineProperty(_ContactEmail, isDisabled, false), _defineProperty(_ContactEmail, isAutoComplete, false), _defineProperty(_ContactEmail, isRequired, false), _defineProperty(_ContactEmail, label, "NewProjectEmailid"), _defineProperty(_ContactEmail, defaultLabel, "Contact Email"), _defineProperty(_ContactEmail, id, ContactEmail), _defineProperty(_ContactEmail, value, ""), _defineProperty(_ContactEmail, error, ""), _defineProperty(_ContactEmail, placeHolder, "NewProjectEmailid"), _defineProperty(_ContactEmail, validation, emailValidation), _ContactEmail)), _defineProperty(_ref, "ContactNumber", (_ContactNumber = {}, _defineProperty(_ContactNumber, isVisible, true), _defineProperty(_ContactNumber, isDisabled, false), _defineProperty(_ContactNumber, isAutoComplete, false), _defineProperty(_ContactNumber, isRequired, false), _defineProperty(_ContactNumber, label, "ContactNumber"), _defineProperty(_ContactNumber, defaultLabel, "Contact Number"), _defineProperty(_ContactNumber, id, ContactNumber), _defineProperty(_ContactNumber, value, ""), _defineProperty(_ContactNumber, error, ""), _defineProperty(_ContactNumber, placeHolder, "ContactNumber"), _defineProperty(_ContactNumber, validation, contactNumberValidation), _ContactNumber)), _ref;
  };

  var AddProject = function AddProject(props) {
    var intl = props.intl,
        updateProjectInfo = props.updateProjectInfo,
        customerNameList = props.customerNameList,
        _props$projectName = props.projectName,
        projectName = _props$projectName === void 0 ? {} : _props$projectName,
        _props$customerName = props.customerName,
        customerName = _props$customerName === void 0 ? {} : _props$customerName,
        _props$tagName = props.tagName,
        tagName = _props$tagName === void 0 ? {} : _props$tagName,
        _props$contactName = props.contactName,
        contactName = _props$contactName === void 0 ? {} : _props$contactName,
        _props$contactEmail = props.contactEmail,
        contactEmail = _props$contactEmail === void 0 ? {} : _props$contactEmail,
        _props$contactNumber = props.contactNumber,
        contactNumber = _props$contactNumber === void 0 ? {} : _props$contactNumber;

    var _useState = React.useState(customerNameList),
        _useState2 = _slicedToArray(_useState, 2),
        menuList = _useState2[0],
        setMenuList = _useState2[1];

    var ContactName = fieldType.ContactName,
        ContactEmail = fieldType.ContactEmail,
        ContactNumber = fieldType.ContactNumber,
        ProjectName = fieldType.ProjectName,
        TagName = fieldType.TagName,
        CustomerName = fieldType.CustomerName;

    var _saveTagStyles = saveTagStyles(),
        tagNameContainer = _saveTagStyles.tagNameContainer,
        tagNameLabel = _saveTagStyles.tagNameLabel,
        errorMsg = _saveTagStyles.errorMsg,
        errorBorder = _saveTagStyles.errorBorder,
        nonErrorBorder = _saveTagStyles.nonErrorBorder,
        searchInput = _saveTagStyles.searchInput,
        tagNameLabelContainer = _saveTagStyles.tagNameLabelContainer,
        searchInputRoot = _saveTagStyles.searchInputRoot,
        newProjectSeletionContainer = _saveTagStyles.newProjectSeletionContainer,
        requiredAsterik = _saveTagStyles.requiredAsterik,
        disableInput = _saveTagStyles.disableInput;

    var _useReducer = React.useReducer(addProjectReducer, addProjectFields(), init),
        _useReducer2 = _slicedToArray(_useReducer, 2),
        state = _useReducer2[0],
        dispatch = _useReducer2[1];

    React.useEffect(function () {
      updateCustomFields([{
        fieldContent: projectName,
        id: ProjectName
      }, {
        fieldContent: tagName,
        id: TagName
      }, {
        fieldContent: customerName,
        id: CustomerName
      }, {
        fieldContent: contactName,
        id: ContactName
      }, {
        fieldContent: contactEmail,
        id: ContactEmail
      }, {
        fieldContent: contactNumber,
        id: ContactNumber
      }]);
      return function () {
        dispatch({
          type: 'reset'
        });
      };
    }, []);
    React.useEffect(function () {
      setMenuList(customerNameList);
    }, [customerNameList]);

    var updateCustomFields = function updateCustomFields(fieldData) {
      var fields = _objectSpread2({}, state);

      fieldData.forEach(function (customField) {
        var fieldContent = customField.fieldContent,
            id = customField.id;
        var newField = fields[id];

        if (Object.keys(fieldContent).length > 0) {
          Object.keys(fieldKeys).forEach(function (key) {
            if (fieldContent.hasOwnProperty(key)) {
              newField[key] = fieldContent[key];
            }
          });
        }

        fields[id] = newField;
      });
      dispatch({
        type: 'updateFields',
        fields: fields
      });
    };

    var updateCustomerInfo = function updateCustomerInfo(_ref) {
      var event = _ref.event,
          id = _ref.id,
          validation = _ref.validation,
          _ref$menuItem = _ref.menuItem,
          menuItem = _ref$menuItem === void 0 ? {} : _ref$menuItem;
      var value = event.target.value;
      var _menuItem$CompanyName = menuItem.CompanyName,
          CompanyName = _menuItem$CompanyName === void 0 ? "" : _menuItem$CompanyName,
          _menuItem$Email = menuItem.Email,
          Email = _menuItem$Email === void 0 ? "" : _menuItem$Email,
          _menuItem$Phone = menuItem.Phone,
          Phone = _menuItem$Phone === void 0 ? "" : _menuItem$Phone,
          _menuItem$CustomerNam = menuItem.CustomerName,
          CustomerName = _menuItem$CustomerNam === void 0 ? value : _menuItem$CustomerNam,
          _menuItem$CustomerID = menuItem.CustomerID,
          CustomerID = _menuItem$CustomerID === void 0 ? "" : _menuItem$CustomerID;
      var validationMessage = validation(CustomerName, intl);
      var isDisabled = CustomerName !== "" && Object.keys(menuItem).length === 0 ? false : true;

      var fields = _objectSpread2({}, state);

      fields[id].value = CustomerName;
      fields[id].error = validationMessage;
      fields[ContactName].value = CompanyName;
      fields[ContactName].error = "";
      fields[ContactName].isDisabled = isDisabled;
      fields[ContactEmail].value = Email;
      fields[ContactEmail].error = "";
      fields[ContactEmail].isDisabled = isDisabled;
      fields[ContactNumber].value = Phone;
      fields[ContactNumber].error = "";
      fields[ContactNumber].isDisabled = isDisabled;
      dispatch({
        type: 'updateFields',
        fields: fields
      });
      updateProjectHandler(fields, CustomerID);
    };

    var validateField = function validateField(_ref2) {
      var event = _ref2.event,
          id = _ref2.id,
          validation = _ref2.validation,
          isRequired = _ref2.isRequired;
      var value = event.target.value;
      var validationMessage = isRequired || value ? validation(value, intl) : "";

      var fields = _objectSpread2({}, state);

      fields[id].value = value;
      fields[id].error = validationMessage;
      dispatch({
        type: 'updateFields',
        fields: fields
      });
      updateProjectHandler(fields);
    };

    var getCustomerID = function getCustomerID(fields, CustomerID) {
      if (CustomerID) {
        return CustomerID;
      }

      if (fields.CustomerName.value) {
        var customer = customerNameList.find(function (customer) {
          return customer.CustomerName === fields.CustomerName.value;
        });

        if (customer) {
          return customer.CustomerID;
        }
      }

      return workflowuiGlobalfunctions.EMPTY_GUID;
    };

    var updateProjectHandler = function updateProjectHandler(fields) {
      var CustomerID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

      if (updateProjectInfo) {
        var customerId = getCustomerID(fields, CustomerID);
        var projectInfo = {};
        var disableSave = false;
        Object.keys(fields).forEach(function (key) {
          if (fields[key].isVisible) {
            var _fields$key = fields[key],
                validation = _fields$key.validation,
                id = _fields$key.id,
                value = _fields$key.value;

            if (validation(value, intl) && fields[key].isRequired || fields[key].error) {
              disableSave = true;
            }

            projectInfo[key] = {
              id: id,
              value: value
            };
          }
        });
        updateProjectInfo({
          projectInfo: projectInfo,
          disableSave: disableSave,
          customerId: customerId
        });
      }
    };

    var createProjectField = function createProjectField(field) {
      var label = field.label,
          _field$defaultLabel = field.defaultLabel,
          defaultLabel = _field$defaultLabel === void 0 ? "" : _field$defaultLabel,
          _field$value = field.value,
          value = _field$value === void 0 ? "" : _field$value,
          id = field.id,
          error = field.error,
          isDisabled = field.isDisabled,
          placeHolder = field.placeHolder,
          isVisible = field.isVisible,
          validation = field.validation,
          isAutoComplete = field.isAutoComplete,
          isRequired = field.isRequired;
      var errorClass = error ? errorBorder : nonErrorBorder;

      if (isVisible) {
        return /*#__PURE__*/React__default['default'].createElement("div", {
          className: tagNameContainer
        }, /*#__PURE__*/React__default['default'].createElement("div", {
          className: tagNameLabel
        }, /*#__PURE__*/React__default['default'].createElement("span", null, translation(label, defaultLabel)), isRequired && /*#__PURE__*/React__default['default'].createElement("span", {
          className: requiredAsterik
        }, "*")), /*#__PURE__*/React__default['default'].createElement("div", {
          className: tagNameLabelContainer
        }, isAutoComplete ? /*#__PURE__*/React__default['default'].createElement(AutoComplete$1, {
          value: value,
          menuList: menuList,
          field: field,
          validateField: updateCustomerInfo,
          isError: error ? true : false
        }) : /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
          id: id,
          className: searchInput,
          value: value,
          variant: "outlined",
          required: isRequired,
          InputProps: {
            classes: {
              input: searchInputRoot,
              notchedOutline: errorClass,
              disabled: disableInput
            }
          },
          disabled: isDisabled,
          placeholder: workflowuiGlobalfunctions.injectIntlTranslation(intl, placeHolder, defaultLabel),
          name: id,
          margin: 'dense',
          size: 'small',
          onChange: function onChange(event) {
            return validateField({
              event: event,
              id: id,
              validation: validation,
              isRequired: isRequired
            });
          }
        }), /*#__PURE__*/React__default['default'].createElement("span", {
          className: errorMsg
        }, error)));
      }

      return null;
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: newProjectSeletionContainer
    }, Object.keys(state).map(function (key) {
      return createProjectField(state[key]);
    }));
  };

  AddProject.propTypes = {
    intl: reactIntl.intlShape.isRequired
  };
  var AddProject$1 = reactIntl.injectIntl( /*#__PURE__*/React.memo(AddProject));

  var css_248z$9 = ".customModalHeader {\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 12px 16px;\r\n    align-items: center;\r\n    background-color: #e5e5e5 !important;\r\n}\r\n\r\n.customModalTitle {\r\n    font-size: 19px;\r\n    line-height: 1.3;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    cursor: default;\r\n    flex: 1 1;\r\n}\r\n\r\n.customModalClose {\r\n    padding: 1px;\r\n}\r\n\r\n.customModalActions {\r\n    flex-wrap: wrap;\r\n    padding: 8px 24px;\r\n}\r\n\r\n.customModalCloseIcon {\r\n    height: 17px;\r\n    width: 17px;\r\n}\r\n\r\n.customModalEmptyRightMargin {\r\n    margin-right: 0px;\r\n}\r\n\r\n.MuiDialog-root {\r\n    z-index: 9999999 !important;\r\n}\r\n\r\n.customModalDialogFooter {\r\n    display: inline-flex;\r\n    justify-content: flex-end;\r\n}\r\n\r\n.customModalDialogError {\r\n    color: #FF0000;\r\n    padding: 15px 70px 15px 15px;\r\n}\r\n";
  styleInject(css_248z$9);

  var ConfirmModal = function ConfirmModal(props) {
    var contentClassName = props.contentClassName,
        title = props.title,
        isModalOpen = props.isModalOpen,
        onClose = props.onClose,
        children = props.children,
        cancelDisabled = props.cancelDisabled,
        hideCancel = props.hideCancel,
        hideActions = props.hideActions,
        disableCloseIcon = props.disableCloseIcon,
        modalWidth = props.modalWidth,
        overrideFooterCancelButton = props.overrideFooterCancelButton,
        _props$id = props.id,
        id = _props$id === void 0 ? "" : _props$id,
        _props$actionButtonLi = props.actionButtonList,
        actionButtonList = _props$actionButtonLi === void 0 ? [] : _props$actionButtonLi,
        _props$errorMsg = props.errorMsg,
        errorMsg = _props$errorMsg === void 0 ? "" : _props$errorMsg,
        _props$fullWidth = props.fullWidth,
        fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
        _props$fullScreen = props.fullScreen,
        fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
        _props$footerComponen = props.footerComponent,
        footerComponent = _props$footerComponen === void 0 ? null : _props$footerComponen,
        _props$hideHeader = props.hideHeader,
        hideHeader = _props$hideHeader === void 0 ? false : _props$hideHeader;
    var cancelText = translation("Cancel");

    var onCancelButtonClick = function onCancelButtonClick() {
      if (overrideFooterCancelButton) {
        overrideFooterCancelButton();
      } else if (onClose) {
        !cancelDisabled && onClose(false);
      }
    };

    var actionButtonClickHandler = function actionButtonClickHandler(button) {
      !button.disabled && button.onClick();
    };

    return /*#__PURE__*/React__default['default'].createElement(Dialog__default['default'], {
      id: id,
      "aria-label": title,
      open: isModalOpen,
      onClose: onClose,
      maxWidth: modalWidth,
      scroll: "paper",
      classes: {
        paper: {
          maxHeight: "90vh"
        }
      },
      disableBackdropClick: true,
      fullWidth: fullWidth,
      fullScreen: fullScreen
    }, !hideHeader && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "customModalHeader"
    }, /*#__PURE__*/React__default['default'].createElement("span", {
      className: "customModalTitle"
    }, title), !disableCloseIcon && /*#__PURE__*/React__default['default'].createElement(core$1.IconButton, {
      className: "customModalClose",
      onClick: onCancelButtonClick
    }, /*#__PURE__*/React__default['default'].createElement(CloseIcon__default['default'], {
      className: "customModalCloseIcon",
      titleAccess: "close"
    }))), /*#__PURE__*/React__default['default'].createElement(DialogContent__default['default'], {
      className: contentClassName
    }, children), !hideActions && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "customModalDialogFooter"
    }, errorMsg && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "customModalDialogError"
    }, " ", errorMsg, " "), /*#__PURE__*/React__default['default'].createElement(DialogActions__default['default'], {
      className: "customModalActions"
    }, !footerComponent ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, !hideCancel && /*#__PURE__*/React__default['default'].createElement(Button, {
      id: "customModalCancel",
      name: cancelText,
      icon: freeSolidSvgIcons.faTimes,
      styles: "eButton",
      onClick: onCancelButtonClick,
      disabled: cancelDisabled
    }, cancelText), actionButtonList.length > 0 && actionButtonList.map(function (actionButton) {
      return /*#__PURE__*/React__default['default'].createElement(Button, {
        id: actionButton.id,
        name: actionButton.name,
        icon: actionButton.icon,
        styles: actionButton.disabled ? "eButton eButtondisable" : "eButton eButtonPrimary customModalEmptyRightMargin",
        onClick: function onClick() {
          return actionButtonClickHandler(actionButton);
        },
        disabled: actionButton.disabled
      }, actionButton.name);
    })) : footerComponent)));
  };

  var tabsStyles = styles.makeStyles(function (theme) {
    return {
      tabsContainer: {
        display: "flex",
        justifyContent: "center"
      },
      tabsRoot: {
        minHeight: "36px",
        borderTopLeftRadius: "2px",
        borderTopRightRadius: "2px"
      },
      tabsSelected: {
        backgroundColor: "#669900 !important",
        color: "#fff",
        textTransform: "none !important"
      },
      tabsNotSelected: {
        backgroundColor: "#dfdfdf !important",
        color: "#333",
        textTransform: "none !important"
      }
    };
  });

  var TabsBuilder = function TabsBuilder(props) {
    var tabs = props.tabs,
        selectedTab = props.selectedTab,
        handleTabChange = props.handleTabChange;

    var _tabsStyles = tabsStyles(),
        tabsContainer = _tabsStyles.tabsContainer,
        tabsRoot = _tabsStyles.tabsRoot,
        tabsSelected = _tabsStyles.tabsSelected,
        tabsNotSelected = _tabsStyles.tabsNotSelected;

    var tabChangeHandler = function tabChangeHandler(event, value) {
      handleTabChange && handleTabChange(event, value);
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: tabsContainer
    }, /*#__PURE__*/React__default['default'].createElement(Tabs__default['default'], {
      value: selectedTab,
      onChange: tabChangeHandler,
      indicatorColor: "default",
      disableRipple: true,
      classes: {
        root: tabsRoot
      },
      variant: "scrollable"
    }, tabs.map(function (tab, index) {
      return /*#__PURE__*/React__default['default'].createElement(Tab__default['default'], {
        className: selectedTab === index ? tabsSelected : tabsNotSelected,
        disableRipple: true,
        label: tab.tabName
      });
    })));
  };

  var TabsBuilder$1 = /*#__PURE__*/React.memo(TabsBuilder);

  var SaveTag = function SaveTag(props) {
    var _props$isModalOpen = props.isModalOpen,
        isModalOpen = _props$isModalOpen === void 0 ? false : _props$isModalOpen,
        _props$hideComponent = props.hideComponent,
        hideComponent = _props$hideComponent === void 0 ? function () {} : _props$hideComponent,
        _props$customerNameLi = props.customerNameList,
        customerNameList = _props$customerNameLi === void 0 ? [] : _props$customerNameLi,
        _props$projectDataLis = props.projectDataList,
        projectDataList = _props$projectDataLis === void 0 ? [] : _props$projectDataLis,
        _props$projectName = props.projectName,
        projectName = _props$projectName === void 0 ? {} : _props$projectName,
        _props$customerName = props.customerName,
        customerName = _props$customerName === void 0 ? {} : _props$customerName,
        _props$tagName = props.tagName,
        tagName = _props$tagName === void 0 ? {} : _props$tagName,
        _props$contactName = props.contactName,
        contactName = _props$contactName === void 0 ? {} : _props$contactName,
        _props$contactEmail = props.contactEmail,
        contactEmail = _props$contactEmail === void 0 ? {} : _props$contactEmail,
        _props$contactNumber = props.contactNumber,
        contactNumber = _props$contactNumber === void 0 ? {} : _props$contactNumber,
        saveTagData = props.saveTagData,
        existingProjectValidation = props.existingProjectValidation,
        errorMsg = props.errorMsg;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        selectedTab = _useState2[0],
        setSelectedTab = _useState2[1];

    var _useState3 = React.useState(customerNameList),
        _useState4 = _slicedToArray(_useState3, 2),
        menuList = _useState4[0],
        setMenuList = _useState4[1];

    var _useState5 = React.useState({}),
        _useState6 = _slicedToArray(_useState5, 2),
        exisitingProjectData = _useState6[0],
        setExisitingProjectData = _useState6[1];

    var _useState7 = React.useState({}),
        _useState8 = _slicedToArray(_useState7, 2),
        newProjectData = _useState8[0],
        setNewProjectData = _useState8[1];

    var _useState9 = React.useState(true),
        _useState10 = _slicedToArray(_useState9, 2),
        disableSave = _useState10[0],
        setDisableSave = _useState10[1];

    var tabs = [{
      tabName: translation("ExistingProject", "Existing Project")
    }, {
      tabName: translation("NewProject", "New Project")
    }];
    React.useEffect(function () {
      setMenuList(customerNameList);
    }, [customerNameList]);

    var createActionsButton = function createActionsButton(disableSave) {
      return [{
        id: "Save",
        name: translation("Save", "Save"),
        icon: freeSolidSvgIcons.faSave,
        onClick: saveTagDataHandler,
        disabled: disableSave
      }];
    };

    var hideComponentHandler = function hideComponentHandler() {
      if (hideComponent) {
        setSelectedTab(0);
        reseTabContent();
        hideComponent();
      }
    };

    var reseTabContent = function reseTabContent() {
      setExisitingProjectData({});
      setNewProjectData({});
      setDisableSave(true);
    };

    var updateExistingTagInfo = function updateExistingTagInfo(existingTagInfo) {
      var disableSave = existingTagInfo.disableSave;
      setDisableSave(disableSave);
      setExisitingProjectData(existingTagInfo);
    };

    var updateProjectInfo = function updateProjectInfo(selectedNewProjectInfo) {
      var disableSave = selectedNewProjectInfo.disableSave;
      setDisableSave(disableSave);
      setNewProjectData(selectedNewProjectInfo);
    };

    var saveTagDataHandler = function saveTagDataHandler() {
      if (saveTagData) {
        saveTagData({
          exisitingProjectData: exisitingProjectData,
          newProjectData: newProjectData,
          selectedTab: selectedTab
        });
      }
    };

    var handleTabChange = function handleTabChange(event, value) {
      setSelectedTab(value);
      reseTabContent();
    };

    var loadComponent = function loadComponent() {
      if (selectedTab) {
        return /*#__PURE__*/React__default['default'].createElement(AddProject$1, {
          customerNameList: menuList,
          updateProjectInfo: updateProjectInfo,
          projectName: projectName,
          customerName: customerName,
          tagName: tagName,
          contactName: contactName,
          contactEmail: contactEmail,
          contactNumber: contactNumber
        });
      } else {
        return /*#__PURE__*/React__default['default'].createElement(ProjectTagSelection$1, {
          onClose: hideComponentHandler,
          projectDataList: projectDataList,
          onSaveTagData: updateExistingTagInfo,
          tagName: tagName,
          onValidation: existingProjectValidation
        });
      }
    };

    return /*#__PURE__*/React__default['default'].createElement(ConfirmModal, {
      isModalOpen: isModalOpen,
      title: translation("SaveTo"),
      onClose: hideComponentHandler,
      hideCancel: false,
      actionButtonList: createActionsButton(disableSave),
      fullWidth: true,
      errorMsg: errorMsg
    }, /*#__PURE__*/React__default['default'].createElement(TabsBuilder$1, {
      tabs: tabs,
      selectedTab: selectedTab,
      handleTabChange: handleTabChange
    }), loadComponent());
  };

  var saveTag = /*#__PURE__*/React.memo(SaveTag);

  var css_248z$a = ".formBuilderDefaultCursor {\r\n    cursor: default;\r\n}\r\n\r\n.formBuilderPointerCursor {\r\n    cursor: pointer !important;\r\n}\r\n\r\n.formBuilderActive {\r\n    cursor: pointer !important;\r\n    color: #152c73;\r\n}\r\n\r\n.formBuilderDisable {\r\n    cursor: not-allowed;\r\n}\r\n\r\n.formBuilderNormal {\r\n    cursor: default;\r\n    color: #152c73;\r\n}\r\n\r\n";
  styleInject(css_248z$a);

  var DynamicIcon = function DynamicIcon(props) {
    var icon = props.icon,
        _props$className = props.className,
        className = _props$className === void 0 ? '' : _props$className,
        _props$style = props.style,
        style = _props$style === void 0 ? {} : _props$style,
        _props$title = props.title,
        title = _props$title === void 0 ? '' : _props$title,
        _props$alt = props.alt,
        alt = _props$alt === void 0 ? '' : _props$alt,
        _props$onClick = props.onClick,
        onClick = _props$onClick === void 0 ? null : _props$onClick,
        rowData = props.rowData,
        rowIndex = props.rowIndex,
        _props$value = props.value;

    var onClickHandler = function onClickHandler(event) {
      if (onClick) {
        if (rowData) {
          onClick(event, rowData, rowIndex);
        } else {
          onClick(event);
        }
      }
    };

    if (icon && icon.iconName) {
      return /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        icon: icon,
        className: className,
        style: style
      });
    } else if (AllIcons__namespace[icon]) {
      return /*#__PURE__*/React__default['default'].createElement(AllIcons__namespace[icon], {
        title: title,
        className: className,
        style: style
      });
    } else {
      return /*#__PURE__*/React__default['default'].createElement("img", {
        src: icon,
        className: "".concat(onClick ? 'formBuilderPointerCursor' : '', " ").concat(className),
        style: style,
        alt: alt,
        onClick: onClickHandler
      });
    }
  };

  var SearchDropdown = function SearchDropdown(props) {
    var node = React.useRef();

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        open = _useState2[0],
        setOpen = _useState2[1];

    var listItemClicked = function listItemClicked(value) {
      props.onListItemClicked(value);
      setOpen(false);
    };

    React.useEffect(function () {
      document.addEventListener("mousedown", handleClick);
      return function () {
        document.removeEventListener("mousedown", handleClick);
      };
    }, []);

    var handleBtnClick = function handleBtnClick() {
      props.filters.length > 1 && setOpen(!open);
    };

    var handleClick = function handleClick(e) {
      if (node.current.contains(e.target)) {
        return;
      }

      setOpen(false);
    };

    function injectIntlTranslation(id) {
      var intl = props.intl;
      return intl.formatMessage({
        id: id
      });
    }

    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: "SearchComponentContainer",
      className: "searchdropdown"
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      id: "SearchDropdownContainer",
      ref: node,
      className: "searchDropdownButton"
    }, /*#__PURE__*/React__default['default'].createElement("button", {
      className: "eButtonsimple",
      onClick: handleBtnClick
    }, injectIntlTranslation(props.filterName), props.filters.length > 1 && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "caret"
    })), open && /*#__PURE__*/React__default['default'].createElement("ul", {
      id: "ProjectSearchCriteriaListContainer",
      className: "dropdown-menu"
    }, props.filters.map(function (value, idx) {
      return /*#__PURE__*/React__default['default'].createElement("li", {
        id: idx,
        key: idx,
        onClick: function onClick() {
          return listItemClicked(value);
        }
      }, value);
    }))), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "searchContainerProject"
    }, /*#__PURE__*/React__default['default'].createElement("input", {
      id: "ProjectSearchTextBox",
      className: "searchBox",
      type: "search",
      name: "search",
      placeholder: props.placeholder,
      onChange: props.onTextChange,
      onKeyPress: props.handleKeyPress
    }), /*#__PURE__*/React__default['default'].createElement("span", {
      onClick: props.onSearchClick
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      id: "ProjectSearchIcon",
      icon: freeSolidSvgIcons.faSearch,
      className: "searchIconProject",
      title: props.title
    }))));
  };

  var Searchdropdown = reactIntl.injectIntl(SearchDropdown);

  var css_248z$b = "\r\n    .customGrid .gridSearch {\r\n        height: 2rem;\r\n        border-radius: 3px;\r\n    }\r\n\r\n    .customGrid .root {\r\n        width: 100%;\r\n        height: auto;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .customGrid .paper {\r\n        width: 100%;\r\n        height: inherit;\r\n    }\r\n\r\n    .customGrid .visuallyHidden {\r\n        border: 0;\r\n        clip: rect(0 0 0 0);\r\n        height: 1;\r\n        margin: -1;\r\n        overflow: hidden;\r\n        padding: 0;\r\n        position: absolute;\r\n        top: 20;\r\n        width: 1;\r\n    }\r\n\r\n    .customGrid .tableWrapper {\r\n        overflow-x: auto;\r\n        height: calc(100% - 42px)\r\n      }\r\n\r\n      .customGrid .table {\r\n        height: 100%;\r\n    }\r\n\r\n    .customGrid .MuiTableSortLabel-root:hover, .customGrid .MuiTableSortLabel-root:focus, .customGrid .MuiTableCell-head,\r\n    .customGrid .MuiTableSortLabel-root.MuiTableSortLabel-active, .customGrid .MuiTableSortLabel-iconDirectionDesc,\r\n    .customGrid .MuiTableSortLabel-iconDirectionAsc, .customGrid .MuiTableSortLabel-root.MuiTableSortLabel-active:hover,\r\n    .customGrid .MuiTableCell-head:hover, .customGrid .MuiTableSortLabel-iconDirectionDesc:hover, .customGrid .MuiTableSortLabel-iconDirectionAsc:hover{\r\n        background-color: #f9f9f9;\r\n        color: #152c73 !important;\r\n        font-weight: bold !important;\r\n    }\r\n\r\n    .customGrid .MuiTableCell-head {\r\n        font-size: 14px  !important;\r\n        line-height: 1.3125rem !important;\r\n        padding-bottom: 7px !important;\r\n        padding-top: 7px !important;\r\n        padding-right: 0px !important;\r\n        padding-left: 10px !important;\r\n        word-break: break-all;\r\n        max-width: 100%;\r\n        cursor: default;\r\n    }\r\n\r\n\r\n    .customGrid .MuiTableCell-root {\r\n        border: 1px solid rgba(224, 224, 224, 1);\r\n        min-width: 88px;\r\n        word-break: break-word;\r\n    }\r\n\r\n    .customGrid .MuiTableSortLabel-root {\r\n        width: 100%;\r\n    }\r\n\r\n    .customGrid .headerColumn {\r\n        width: 100%;\r\n    }\r\n\r\n    .customGrid .MuiTableSortLabel-icon {\r\n        width: 28px !important;\r\n        height: 28px !important;\r\n        margin-left: 0px !important;\r\n        margin-right: 0px !important;\r\n    }\r\n\r\n    .customGrid .MuiTableCell-root:nth-child(1) {\r\n        min-width: 40px;\r\n    }\r\n\r\n    .customGrid tbody tr {\r\n        padding: 0px;\r\n        height: 30px;\r\n    }\r\n\r\n    .customGrid td {\r\n        padding: 0px 1px 0px 9px !important;\r\n        word-break: break-all;\r\n        max-width: 50%;\r\n        cursor: default;\r\n    }\r\n\r\n    .customGrid .headerColumn {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .customGrid .headerColumnSubTitle {\r\n        color: #999 !important;\r\n    }\r\n\r\n    .customGrid tr:nth-child(even) {\r\n        background-color: #f5f5f5 !important;\r\n    }\r\n\r\n    .customGrid tr:nth-child(odd) {\r\n        background-color: transparent !important;\r\n    }\r\n\r\n    .customGrid .footerContainer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        color: #656565;\r\n        background-color: #f6f6f6;\r\n\r\n    }\r\n\r\n    .customGrid .footerContainer .MuiIconButton-root.Mui-disabled {\r\n        opacity: 0.5;\r\n    }\r\n\r\n    .customGrid .footerContainer .MuiIconButton-root {\r\n        padding: 12px !important;\r\n        border-radius: 50%  !important;\r\n    }\r\n\r\n    .customGrid .footerItemsButton {\r\n        margin: 0 2rem;\r\n    }\r\n\r\n    .customGrid .footerLastFirst {\r\n        font-size: 12px;\r\n        color: #656565;\r\n    }\r\n\r\n    .customGrid .footerForwardBackward {\r\n        font-size: 18px;\r\n        color: #656565;\r\n    }\r\n\r\n    .customGrid .footerSelect {\r\n        width: 50px;\r\n        margin: 0 0.5rem;\r\n        height: 20px;\r\n    }\r\n\r\n    .customGrid .footerPagerContainer {\r\n        width: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    .customGrid .footerChips {\r\n        color: #fff;\r\n        border: 1px solid #d1d1d1;\r\n        background-color: #8c8c8c;\r\n    }\r\n\r\n    .customGrid .footerChipsUnselected {\r\n        background-color: transparent;\r\n        color: #656565;\r\n        border: none;\r\n    }\r\n\r\n    .customGrid .messageContainer {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 150px;\r\n        width: inherit;\r\n    }\r\n\r\n    .customGrid .messageContainerDefaultHeight {\r\n        min-height: 300px;\r\n    }\r\n";
  styleInject(css_248z$b);

  var CustomGridHead = function CustomGridHead(props) {
    var ascending = workflowuiGlobalfunctions.sortingOrder.ascending,
        descending = workflowuiGlobalfunctions.sortingOrder.descending;
    var order = props.order,
        orderBy = props.orderBy,
        onRequestSort = props.onRequestSort,
        headCells = props.headCells,
        sortable = props.sortable,
        onSelectAllClick = props.onSelectAllClick,
        showCheckbox = props.showCheckbox,
        singleSelectGrid = props.singleSelectGrid,
        rowCount = props.rowCount,
        numSelected = props.numSelected;

    var createSortHandler = function createSortHandler(property) {
      return function (event) {
        onRequestSort(event, property);
      };
    };

    var showHeader = function showHeader(cell) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "headerColumn"
      }, /*#__PURE__*/React__default['default'].createElement("span", null, cell.displayName || cell.name, cell.showCheckbox && /*#__PURE__*/React__default['default'].createElement(Checkbox__default['default'], {
        id: "".concat(cell.name, "_checkbox"),
        color: "primary",
        onChange: function onChange(event) {
          cell.onChange && cell.onChange(event.target.checked, cell);
        },
        inputProps: {
          'aria-label': 'select this column'
        }
      })), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "headerColumnSubTitle"
      }, cell.subHeader));
    };

    var showCheckboxCell = function showCheckboxCell(singleSelectGrid) {
      return /*#__PURE__*/React__default['default'].createElement(TableCell__default['default'], {
        padding: "checkbox"
      }, !singleSelectGrid && /*#__PURE__*/React__default['default'].createElement(Checkbox__default['default'], {
        id: "selectAllRowsCustomGrid",
        color: "primary",
        checked: rowCount > 0 && numSelected === rowCount,
        onChange: onSelectAllClick,
        inputProps: {
          'aria-label': 'select all rows'
        }
      }));
    };

    var headCellsData = headCells.length ? headCells : [{
      name: ''
    }];
    return /*#__PURE__*/React__default['default'].createElement(TableHead__default['default'], {
      className: "tableHead"
    }, /*#__PURE__*/React__default['default'].createElement(TableRow__default['default'], null, showCheckbox && showCheckboxCell(singleSelectGrid), headCellsData.map(function (cell) {
      return /*#__PURE__*/React__default['default'].createElement(TableCell__default['default'], {
        key: cell.name,
        align: "left",
        padding: "default",
        sortDirection: orderBy === cell.name ? order : false,
        IconComponent: false,
        className: cell.className
      }, sortable && !cell.disableSorting ? /*#__PURE__*/React__default['default'].createElement(TableSortLabel__default['default'], {
        active: orderBy === cell.name,
        direction: orderBy === cell.name ? order : ascending,
        onClick: createSortHandler(cell.name),
        IconComponent: ArrowDropDownIcon__default['default']
      }, showHeader(cell), orderBy === cell.name ? /*#__PURE__*/React__default['default'].createElement("span", {
        className: "visuallyHidden"
      }, order === descending ? "sorted descending" : "sorted ascending") : null) : /*#__PURE__*/React__default['default'].createElement(TableSortLabel__default['default'], {
        active: false,
        direction: orderBy === cell.name ? order : ascending,
        onClick: null,
        hideSortIcon: true
      }, showHeader(cell)));
    })));
  };

  var CustomGridPagination = function CustomGridPagination(props) {
    var rowsLength = props.rowsLength,
        labelRowsPerPage = props.labelRowsPerPage,
        rowsPerPage = props.rowsPerPage,
        handleChangeRowsPerPage = props.handleChangeRowsPerPage,
        searchText = props.searchText,
        initialRowData = props.initialRowData,
        _props$rowsPerPageOpt = props.rowsPerPageOptions,
        rowsPerPageOptions = _props$rowsPerPageOpt === void 0 ? [5, 10, 25, 50, 100, 'All'] : _props$rowsPerPageOpt,
        handleChangePage = props.handleChangePage,
        page = props.page,
        doNotTranslate = props.doNotTranslate,
        isAllPaginationSelected = props.isAllPaginationSelected;
    var chipCountValue = Math.ceil(rowsLength / rowsPerPage);
    var chipsCount = isNaN(chipCountValue) ? 0 : chipCountValue;

    var createhandleChangeRowsPerPage = function createhandleChangeRowsPerPage(event) {
      handleChangeRowsPerPage(event);
    };

    var handleBackButtonClick = function handleBackButtonClick() {
      handleChangePage(page - 1);
    };

    var handleNextButtonClick = function handleNextButtonClick() {
      handleChangePage(page + 1);
    };

    var handleFirstButtonClick = function handleFirstButtonClick() {
      handleChangePage(0);
    };

    var handleLastNextButtonClick = function handleLastNextButtonClick() {
      handleChangePage(chipsCount - 1);
    };

    var labelDisplayedRows = function labelDisplayedRows(_ref) {
      var from = _ref.from,
          to = _ref.to;
      var displayItem = "";

      if (searchText.trim()) {
        displayItem = doNotTranslate ? "(filtered from ".concat(initialRowData.length, " total entries)") : translation("FilteredEntries", "items", {
          Count: initialRowData.length
        });
      } else {
        displayItem = doNotTranslate ? "Items" : translation("Items", "Items");
      }

      return doNotTranslate ? "Displaying  ".concat(from, "-").concat(to === -1 ? rowsLength : to, " of ").concat(rowsLength, " ").concat(displayItem) : translation("DisplayingItems", "Displaying", {
        From: from,
        To: to,
        Length: rowsLength,
        Display: displayItem
      });
    };

    var showRowsSelectionOptions = function showRowsSelectionOptions() {
      var isSelected = false;
      return rowsPerPageOptions.map(function (rowsCount) {
        if (rowsCount === rowsPerPage && !isAllPaginationSelected) {
          isSelected = true;
          return /*#__PURE__*/React__default['default'].createElement("option", {
            selected: true
          }, rowsCount);
        } else if (!isSelected && typeof rowsCount === 'string' && rowsCount.toLowerCase() === 'all') {
          isSelected = true;
          return /*#__PURE__*/React__default['default'].createElement("option", {
            selected: true
          }, rowsCount);
        }

        return /*#__PURE__*/React__default['default'].createElement("option", null, rowsCount);
      });
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "footerContainer"
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "footerPagerContainer"
    }, /*#__PURE__*/React__default['default'].createElement("span", null, doNotTranslate ? "Show" : translation("Show")), /*#__PURE__*/React__default['default'].createElement("select", {
      className: "footerSelect",
      onChange: createhandleChangeRowsPerPage
    }, showRowsSelectionOptions()), doNotTranslate ? "rows per page" : translation("Rowsperpage"), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "footerItemsButton"
    }, labelDisplayedRows({
      from: rowsLength === 0 ? 0 : page * rowsPerPage + 1,
      to: rowsLength !== -1 ? Math.min(rowsLength, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage
    })), /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
      onClick: handleFirstButtonClick,
      disabled: page === 0,
      color: "inherit",
      title: "First"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faStepBackward,
      className: "footerLastFirst"
    })), /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
      onClick: handleBackButtonClick,
      disabled: page === 0,
      color: "inherit",
      title: "Previous"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faCaretLeft,
      className: "footerForwardBackward"
    })), /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
      onClick: handleNextButtonClick,
      disabled: rowsLength !== -1 ? page >= chipsCount - 1 : false,
      color: "inherit",
      title: "Next"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faCaretRight,
      className: "footerForwardBackward"
    })), /*#__PURE__*/React__default['default'].createElement(IconButton__default['default'], {
      onClick: handleLastNextButtonClick,
      disabled: rowsLength !== -1 ? page >= chipsCount - 1 : false,
      color: "inherit",
      title: "Last"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faStepForward,
      className: "footerLastFirst"
    }))));
  };

  var ConfigDrivenUrlField = function ConfigDrivenUrlField(props) {
    var _props$rowData = props.rowData,
        rowData = _props$rowData === void 0 ? {} : _props$rowData,
        rowIndex = props.rowIndex,
        _props$config = props.config,
        config = _props$config === void 0 ? {} : _props$config,
        _props$value = props.value,
        value = _props$value === void 0 ? '' : _props$value;
    var href = config.href,
        className = config.className,
        _config$onClick = config.onClick,
        onClick = _config$onClick === void 0 ? null : _config$onClick;

    var onClickHandler = function onClickHandler(event) {
      onClick && onClick(event, rowData, rowIndex);
    };

    var classes = classNames__default['default'](className, onClick ? 'formBuilderActive' : 'formBuilderNormal');
    return /*#__PURE__*/React__default['default'].createElement("a", {
      href: href,
      className: classes,
      target: "_blank",
      onClick: onClickHandler
    }, workflowuiGlobalfunctions.formatValue(config, value));
  };

  var ConfigDrivenDateField = function ConfigDrivenDateField(props) {
    var _props$rowData = props.rowData,
        rowData = _props$rowData === void 0 ? {} : _props$rowData,
        rowIndex = props.rowIndex,
        _props$config = props.config,
        config = _props$config === void 0 ? {} : _props$config,
        _props$value = props.value,
        value = _props$value === void 0 ? '' : _props$value;
    var _config$format = config.format,
        format = _config$format === void 0 ? null : _config$format,
        className = config.className,
        _config$onClick = config.onClick,
        onClick = _config$onClick === void 0 ? null : _config$onClick;

    var onClickHandler = function onClickHandler(event) {
      onClick && onClick(event, rowData, rowIndex);
    };

    var classes = classNames__default['default'](className, onClick ? 'formBuilderActive' : 'formBuilderNormal');
    return /*#__PURE__*/React__default['default'].createElement("span", {
      className: classes,
      onClick: onClickHandler
    }, format ? workflowuiGlobalfunctions.getLocalDate(value, format) : value);
  };

  var inputStyles = makeStyles__default['default']({
    InputRoot: {
      fontSize: "14px",
      paddingLeft: "5px",
      paddingRight: '0px',
      width: function width(props) {
        return props.width || "100%";
      }
    }
  });

  var ConfigDrivenNumberField = function ConfigDrivenNumberField(props) {
    var _props$rowData = props.rowData,
        rowData = _props$rowData === void 0 ? {} : _props$rowData,
        rowIndex = props.rowIndex,
        _props$config = props.config,
        config = _props$config === void 0 ? {} : _props$config,
        _props$value = props.value,
        value = _props$value === void 0 ? 0 : _props$value,
        doNotTranslate = props.doNotTranslate;
    var _config$step = config.step,
        step = _config$step === void 0 ? "1" : _config$step,
        _config$min = config.min,
        min = _config$min === void 0 ? "-99999999" : _config$min,
        _config$max = config.max,
        max = _config$max === void 0 ? "99999999" : _config$max,
        _config$className = config.className,
        className = _config$className === void 0 ? null : _config$className,
        _config$onClick = config.onClick,
        onClick = _config$onClick === void 0 ? null : _config$onClick,
        _config$isEditable = config.isEditable,
        isEditable = _config$isEditable === void 0 ? false : _config$isEditable,
        _config$validations = config.validations,
        validations = _config$validations === void 0 ? {} : _config$validations;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        editable = _useState2[0],
        setEditable = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        editedValue = _useState4[0],
        setEditedValue = _useState4[1];

    var _useState5 = React.useState(true),
        _useState6 = _slicedToArray(_useState5, 2),
        isValid = _useState6[0],
        setIsValid = _useState6[1];

    var _useState7 = React.useState(''),
        _useState8 = _slicedToArray(_useState7, 2),
        validationmessage = _useState8[0],
        setValidationMessage = _useState8[1];

    var _useState9 = React.useState({
      width: '100%'
    }),
        _useState10 = _slicedToArray(_useState9, 2),
        containerWidth = _useState10[0],
        setContainerWidth = _useState10[1];

    var _inputStyles = inputStyles(containerWidth),
        InputRoot = _inputStyles.InputRoot;

    var ref1 = React.useRef(null);

    var onClickHandler = function onClickHandler() {
      setContainerWidth({
        width: "".concat(ref1.current.offsetWidth - 5, "px")
      });
      setEditedValue(getFormatedValue());
      setEditable(true);
    };

    var updateValue = function updateValue(event) {
      if (checkValidation()) {
        setIsValid(true);
        setEditable(false);
        onClick && onClick(event, editedValue, rowData, rowIndex);
      }
    };

    var checkValidation = function checkValidation() {
      if (editedValue === value) {
        setEditable(false);
        return false;
      }

      if (validations.validation) {
        var message = validations.validation(editedValue);

        if (message) {
          setValidationMessage(message);
          setIsValid(false);
          return false;
        }
      }

      return true;
    };

    var enterKeyPressHandler = function enterKeyPressHandler(event) {
      event.stopPropagation();

      if (event.key === workflowuiGlobalfunctions.keyboard.ENTER) {
        updateValue(event);
      }
    };

    var onChangeHandler = function onChangeHandler(event) {
      setEditedValue(event.target.value);
    };

    var getFormatedValue = function getFormatedValue() {
      return workflowuiGlobalfunctions.formatValue(config, value);
    };

    var classes = classNames__default['default'](className, onClick ? 'formBuilderActive' : 'formBuilderNormal');

    if (!isEditable) {
      return getFormatedValue();
    }

    return editable ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
      type: "number",
      variant: "outlined",
      fullWidth: true,
      inputProps: {
        min: min,
        max: max,
        step: step
      },
      InputProps: {
        classes: {
          input: InputRoot
        }
      },
      value: editedValue,
      autoFocus: true,
      margin: "none",
      size: "small",
      onKeyUp: enterKeyPressHandler,
      onChange: onChangeHandler,
      onBlur: updateValue
    }), !isValid && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "errorMsg"
    }, validationmessage)) : /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
      ref: ref1,
      title: doNotTranslate ? "Click to Edit" : translation("ClickToEdit", "Click to Edit"),
      arrow: true
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: classes,
      onClick: onClickHandler
    }, getFormatedValue()));
  };

  var ConfigDrivenTextBoxField = function ConfigDrivenTextBoxField(props) {
    var _props$rowData = props.rowData,
        rowData = _props$rowData === void 0 ? {} : _props$rowData,
        rowIndex = props.rowIndex,
        _props$config = props.config,
        config = _props$config === void 0 ? {} : _props$config,
        _props$value = props.value,
        value = _props$value === void 0 ? 0 : _props$value,
        doNotTranslate = props.doNotTranslate;
    var _config$className = config.className,
        className = _config$className === void 0 ? null : _config$className,
        _config$onClick = config.onClick,
        onClick = _config$onClick === void 0 ? null : _config$onClick,
        _config$isEditable = config.isEditable,
        isEditable = _config$isEditable === void 0 ? false : _config$isEditable,
        _config$validations = config.validations,
        validations = _config$validations === void 0 ? {} : _config$validations;

    var _useState = React.useState(true),
        _useState2 = _slicedToArray(_useState, 2),
        isValid = _useState2[0],
        setIsValid = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        editable = _useState4[0],
        setEditable = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        editedValue = _useState6[0],
        setEditedValue = _useState6[1];

    var _useState7 = React.useState(''),
        _useState8 = _slicedToArray(_useState7, 2),
        validationmessage = _useState8[0],
        setValidationMessage = _useState8[1];

    var _useState9 = React.useState({
      width: '100%'
    }),
        _useState10 = _slicedToArray(_useState9, 2),
        containerWidth = _useState10[0],
        setContainerWidth = _useState10[1];

    var _inputStyles = inputStyles(containerWidth),
        InputRoot = _inputStyles.InputRoot;

    var ref1 = React.useRef(null);

    var onClickHandler = function onClickHandler() {
      setContainerWidth({
        width: "".concat(ref1.current.offsetWidth - 5, "px")
      });
      setEditedValue(getFormatedValue());
      setEditable(true);
    };

    var updateValue = function updateValue(event) {
      if (checkValidation()) {
        setIsValid(true);
        setEditable(false);
        onClick && onClick(event, editedValue, rowData, rowIndex);
      }
    };

    var checkValidation = function checkValidation() {
      if (editedValue === value) {
        setEditable(false);
        return false;
      }

      if (validations.validation) {
        var message = validations.validation(editedValue);

        if (message) {
          setValidationMessage(message);
          setIsValid(false);
          return false;
        }
      }

      return true;
    };

    var enterKeyPressHandler = function enterKeyPressHandler(event) {
      event.stopPropagation();

      if (event.key === workflowuiGlobalfunctions.keyboard.ENTER) {
        updateValue(event);
      }
    };

    var onChangeHandler = function onChangeHandler(event) {
      setEditedValue(event.target.value);
    };

    var getFormatedValue = function getFormatedValue() {
      return workflowuiGlobalfunctions.formatValue(config, value);
    };

    var classes = classNames__default['default'](className, onClick ? 'formBuilderActive' : 'formBuilderNormal');

    if (!isEditable) {
      return getFormatedValue();
    }

    return editable ? /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(TextField__default['default'], {
      fullWidth: true,
      variant: "outlined",
      value: editedValue,
      InputProps: {
        classes: {
          input: InputRoot
        }
      },
      autoFocus: true,
      margin: 'none',
      size: 'small',
      onKeyUp: enterKeyPressHandler,
      onChange: onChangeHandler,
      onBlur: updateValue
    }), !isValid && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "errorMsg"
    }, validationmessage)) : /*#__PURE__*/React__default['default'].createElement(Tooltip__default['default'], {
      title: doNotTranslate ? "Click to Edit" : translation("ClickToEdit", "Click to Edit"),
      arrow: true
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      ref: ref1,
      className: classes,
      onClick: onClickHandler
    }, getFormatedValue()));
  };

  var FormBuilderField = function FormBuilderField(props) {
    var config = props.config,
        value = props.value;
    var formattedValue = workflowuiGlobalfunctions.formatValue(config, value);

    switch (config.columnType) {
      case workflowuiGlobalfunctions.columnType.url:
        return /*#__PURE__*/React__default['default'].createElement(ConfigDrivenUrlField, props);

      case workflowuiGlobalfunctions.columnType.icon:
        return /*#__PURE__*/React__default['default'].createElement(DynamicIcon, _extends({
          icon: value
        }, config, props));

      case workflowuiGlobalfunctions.columnType.date:
        return /*#__PURE__*/React__default['default'].createElement(ConfigDrivenDateField, props);

      case workflowuiGlobalfunctions.columnType.number:
        return /*#__PURE__*/React__default['default'].createElement(ConfigDrivenNumberField, props);

      case workflowuiGlobalfunctions.columnType.textBox:
        return /*#__PURE__*/React__default['default'].createElement(ConfigDrivenTextBoxField, props);

      case workflowuiGlobalfunctions.columnType.button:
        return /*#__PURE__*/React__default['default'].createElement(Button, {
          name: config.name,
          styles: config.className,
          onClick: function onClick() {
            return config.onClick(props.rowData);
          }
        });

      case workflowuiGlobalfunctions.columnType.customComponent:
        return config.component ? /*#__PURE__*/React__default['default'].createElement(config.component, _objectSpread2({}, props)) : null;

      default:
        return /*#__PURE__*/React__default['default'].createElement(React.Fragment, null, formattedValue);
    }
  };

  function CustomGridBody(props) {
    var rows = props.rows,
        order = props.order,
        orderBy = props.orderBy,
        page = props.page,
        rowsPerPage = props.rowsPerPage,
        config = props.config,
        headCells = props.headCells,
        showCheckbox = props.showCheckbox,
        _props$selectionType = props.selectionType,
        selectionType = _props$selectionType === void 0 ? false : _props$selectionType,
        isSelected = props.isSelected,
        handleClick = props.handleClick,
        doNotTranslate = props.doNotTranslate;

    var descendingComparator = function descendingComparator(a, b, orderBy) {
      var orderByKey = config[orderBy] && config[orderBy].lookUpKey || orderBy;
      var aValue = getValueForDynamicKey(a, orderByKey);
      var bValue = getValueForDynamicKey(b, orderByKey);
      var firstArg = typeof aValue === 'string' ? aValue.toLowerCase() : aValue;
      var secondArg = typeof bValue === 'string' ? bValue.toLowerCase() : bValue;

      if (secondArg < firstArg) {
        return -1;
      }

      if (secondArg > firstArg) {
        return 1;
      }

      return 0;
    };

    var getComparator = function getComparator(order, orderBy) {
      if (order === workflowuiGlobalfunctions.sortingOrder.descending) {
        return function (a, b) {
          return descendingComparator(a, b, orderBy);
        };
      } else {
        return function (a, b) {
          return -descendingComparator(a, b, orderBy);
        };
      }
    };

    var stableSort = function stableSort(array, comparator) {
      var stabilizedThis = array.map(function (el, index) {
        return [el, index];
      });
      stabilizedThis.sort(function (a, b) {
        var order = comparator(a[0], b[0]);
        if (order !== 0) return order;
        return a[1] - b[1];
      });
      return stabilizedThis.map(function (el) {
        return el[0];
      });
    };

    var showSelectionCell = function showSelectionCell(isItemSelected, row, index, type) {
      var selectionProps = {
        id: "customGridRow".concat(index, "_checkbox"),
        color: 'primary',
        checked: isItemSelected,
        onChange: function onChange(event) {
          return handleClick(event, row, index, type);
        },
        inputProps: {
          'aria-label': 'select this row'
        }
      };
      return /*#__PURE__*/React__default['default'].createElement(TableCell__default['default'], {
        padding: "checkbox"
      }, type ? /*#__PURE__*/React__default['default'].createElement(Radio__default['default'], selectionProps) : /*#__PURE__*/React__default['default'].createElement(Checkbox__default['default'], selectionProps));
    };
    /****
     ** This Function is using to get the value from an object for a dynamic key
     ** Key can be used for nested object as well
     ** key/lookup hierarchy can be created as '-' operator
     ** Conditional key also can be used with the help of ':' operator
     ** RowData example const obj = {one: "One", two: {three : "Three"}, four: "Four"}
     ** if you pass lookUpKey as 'one' you will get output as "One"
     ** if you pass lookUpKey as 'two-three' you will get output as "Three"
     ** if you pass lookUpKey as 'two-three:four' you will get still get output as "Three"
     ** if you pass lookUpKey as 'two-five:four' you will get still get output as "Four"
     ****/


    var getValueForDynamicKey = function getValueForDynamicKey() {
      var rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var lookUpKey = arguments.length > 1 ? arguments[1] : undefined;
      var value = '';
      if (!lookUpKey) return value;
      var lookUpKeyList = lookUpKey.split(':');

      for (var i = 0; i < lookUpKeyList.length; i++) {
        var keysList = lookUpKeyList[i].split('-');
        var val = rowData;

        for (var j = 0; j < keysList.length; j++) {
          var element = keysList[j];

          if (val.hasOwnProperty(element)) {
            val = val[element];

            if (!isPlainObject__default['default'](val)) {
              return val;
            }
          } else {
            break;
          }
        }
      }

      return value;
    };

    return /*#__PURE__*/React__default['default'].createElement(TableBody__default['default'], null, stableSort(rows, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (row, index) {
      var isItemSelected = isSelected(row);
      return /*#__PURE__*/React__default['default'].createElement(TableRow__default['default'], {
        hover: true,
        role: "checkbox",
        "aria-checked": isItemSelected,
        tabIndex: -1,
        key: index,
        selected: isItemSelected
      }, showCheckbox && showSelectionCell(isItemSelected, row, index, selectionType), headCells.map(function (head) {
        var configItem = config[head.name] || {};
        var lookUpKey = configItem.lookUpKey || head.name;
        return /*#__PURE__*/React__default['default'].createElement(TableCell__default['default'], {
          align: "left",
          className: row.className || ""
        }, /*#__PURE__*/React__default['default'].createElement(FormBuilderField, {
          doNotTranslate: doNotTranslate,
          rowData: row,
          rowIndex: index,
          config: configItem,
          value: getValueForDynamicKey(row, lookUpKey)
        }));
      }));
    }));
  }

  var CustomGridSearch = function CustomGridSearch(props) {
    var intl = props.intl,
        onSearch = props.onSearch;

    var injectIntlTranslation = function injectIntlTranslation(id) {
      return intl.formatMessage({
        id: id
      });
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      className: "searchdropdown"
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "searchContainerProject gridSearch"
    }, /*#__PURE__*/React__default['default'].createElement("input", {
      className: "searchBox",
      type: "search",
      name: "search",
      placeholder: injectIntlTranslation("SearchPlaceholderText"),
      onChange: onSearch
    })));
  };

  var CustomGridSearch$1 = reactIntl.injectIntl(CustomGridSearch);

  function CustomGrid(props) {
    var ascending = workflowuiGlobalfunctions.sortingOrder.ascending,
        descending = workflowuiGlobalfunctions.sortingOrder.descending;
    var _props$selectedRows = props.selectedRows,
        selectedRows = _props$selectedRows === void 0 ? [] : _props$selectedRows,
        _props$rows = props.rows,
        rows = _props$rows === void 0 ? [] : _props$rows,
        headCells = props.headCells,
        rowsPerPageOptions = props.rowsPerPageOptions,
        labelRowsPerPage = props.labelRowsPerPage,
        _props$config = props.config,
        config = _props$config === void 0 ? {} : _props$config,
        showCheckbox = props.showCheckbox,
        rowsToShowPerPage = props.rowsToShowPerPage,
        sortable = props.sortable,
        orderByfield = props.orderByfield,
        uniqueKey = props.uniqueKey,
        rowCheckboxHandler = props.rowCheckboxHandler,
        hidePagination = props.hidePagination,
        hideSearch = props.hideSearch,
        onSearch = props.onSearch,
        isLoading = props.isLoading,
        gridClassName = props.gridClassName,
        _props$singleSelectGr = props.singleSelectGrid,
        singleSelectGrid = _props$singleSelectGr === void 0 ? false : _props$singleSelectGr,
        _props$doNotTranslate = props.doNotTranslate,
        doNotTranslate = _props$doNotTranslate === void 0 ? true : _props$doNotTranslate,
        _props$id = props.id,
        id = _props$id === void 0 ? 'customGrid' : _props$id,
        _props$sorting = props.sorting,
        sorting = _props$sorting === void 0 ? ascending : _props$sorting;

    var _useState = React.useState(sorting),
        _useState2 = _slicedToArray(_useState, 2),
        order = _useState2[0],
        setOrder = _useState2[1];

    var _useState3 = React.useState(orderByfield),
        _useState4 = _slicedToArray(_useState3, 2),
        orderBy = _useState4[0],
        setOrderBy = _useState4[1];

    var _useState5 = React.useState(selectedRows),
        _useState6 = _slicedToArray(_useState5, 2),
        selected = _useState6[0],
        setSelected = _useState6[1];

    var _useState7 = React.useState(0),
        _useState8 = _slicedToArray(_useState7, 2),
        page = _useState8[0],
        setPage = _useState8[1];

    var _useState9 = React.useState(rowsToShowPerPage),
        _useState10 = _slicedToArray(_useState9, 2),
        rowsPerPage = _useState10[0],
        setRowsPerPage = _useState10[1];

    var _useState11 = React.useState(rows),
        _useState12 = _slicedToArray(_useState11, 2),
        initialRowData = _useState12[0],
        setInitialRowData = _useState12[1];

    var _useState13 = React.useState(''),
        _useState14 = _slicedToArray(_useState13, 2),
        searchText = _useState14[0],
        setSearchText = _useState14[1];

    var _useState15 = React.useState(false),
        _useState16 = _slicedToArray(_useState15, 2),
        isAllPaginationSelected = _useState16[0],
        setIsAllPaginationSelected = _useState16[1];

    React.useEffect(function () {
      if (!rowsPerPage || isAllPaginationSelected) {
        setRowsPerPage(rows.length);
      }

      if (!initialRowData.length && rows.length) {
        setInitialRowData(rows);
      }
    }, [rows, rowsPerPage, initialRowData]);
    React.useEffect(function () {
      setSelected(selected.filter(function (item) {
        return rows.includes(item);
      }));
    }, [rows]);
    React.useEffect(function () {
      if (order !== sorting) {
        setOrder(sorting);
      }
    }, [sorting]);

    var handleRequestSort = function handleRequestSort(event, property) {
      var isAsc = orderBy === property && order === ascending;
      setOrder(isAsc ? descending : ascending);
      setOrderBy(property);
    };

    var handleSelectAllClick = function handleSelectAllClick(_ref) {
      var checked = _ref.target.checked;

      if (checked) {
        setSelected(rows);
        rowCheckboxHandler && rowCheckboxHandler(rows);
      } else {
        setSelected([]);
        rowCheckboxHandler && rowCheckboxHandler([]);
      }
    };

    var handleClick = function handleClick(_ref2, row, index, type) {
      var checked = _ref2.target.checked;

      if (type) {
        handleSingleSelectClick(row);
      } else {
        handleMultiSelectClick(checked, row);
      }
    };

    var handleSingleSelectClick = function handleSingleSelectClick(row) {
      setSelected([row]);

      if (rowCheckboxHandler) {
        rowCheckboxHandler([row]);
      }
    };

    var handleMultiSelectClick = function handleMultiSelectClick(checked, row, index) {
      var newSelected = _toConsumableArray(selected);

      if (checked) {
        newSelected.push(row);
        setSelected(newSelected);
      } else {
        var selectedIndex = -1;
        newSelected.some(function (item, index) {
          if (item[uniqueKey] === row[uniqueKey]) {
            selectedIndex = index;
            return true;
          }

          return false;
        });
        newSelected.splice(selectedIndex, 1);
        setSelected(_toConsumableArray(newSelected));
      }

      if (rowCheckboxHandler) {
        rowCheckboxHandler(newSelected);
      }
    };

    var handleChangePage = function handleChangePage(newPage) {
      setPage(newPage);
    };

    var handleChangeRowsPerPage = function handleChangeRowsPerPage(_ref3) {
      var value = _ref3.target.value;

      if (typeof value === 'string' && value.toLowerCase() === 'all') {
        value = rows.length;
        !isAllPaginationSelected && setIsAllPaginationSelected(true);
      } else {
        isAllPaginationSelected && setIsAllPaginationSelected(false);
      }

      setRowsPerPage(parseInt(value, 10));
      setPage(0);
    };

    var onSearchHandler = function onSearchHandler(event) {
      var value = event.target.value;
      onSearch && onSearch(event);
      setSearchText(value);
    };

    var isSelected = function isSelected(row) {
      return selected.some(function (item) {
        return item[uniqueKey] === row[uniqueKey];
      });
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: id,
      className: "customGrid"
    }, !hideSearch && /*#__PURE__*/React__default['default'].createElement(CustomGridSearch$1, {
      onSearch: onSearchHandler
    }), /*#__PURE__*/React__default['default'].createElement("div", {
      id: "".concat(id, "_root"),
      className: "root ".concat(gridClassName || '')
    }, /*#__PURE__*/React__default['default'].createElement(Paper__default['default'], {
      className: "paper"
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      id: "".concat(id, "_table"),
      className: 'tableWrapper'
    }, /*#__PURE__*/React__default['default'].createElement(Table__default['default'], {
      stickyHeader: true,
      className: "table",
      size: "medium"
    }, /*#__PURE__*/React__default['default'].createElement(CustomGridHead, {
      headCells: headCells,
      order: order,
      orderBy: orderBy,
      sortable: sortable,
      numSelected: selected.length,
      rowCount: rows.length,
      showCheckbox: showCheckbox,
      singleSelectGrid: singleSelectGrid,
      onSelectAllClick: handleSelectAllClick,
      onRequestSort: handleRequestSort,
      doNotTranslate: doNotTranslate
    }), !!rows.length && /*#__PURE__*/React__default['default'].createElement(CustomGridBody, {
      isLoading: isLoading,
      gridClassName: gridClassName,
      headCells: headCells,
      showCheckbox: showCheckbox,
      rows: rows,
      order: order,
      orderBy: orderBy,
      page: page,
      rowsPerPage: rowsPerPage,
      isSelected: isSelected,
      handleClick: handleClick,
      selectionType: singleSelectGrid,
      config: config,
      doNotTranslate: doNotTranslate
    })), !rows.length && /*#__PURE__*/React__default['default'].createElement("div", {
      className: "messageContainer".concat(!gridClassName ? ' messageContainerDefaultHeight' : '')
    }, isLoading ? /*#__PURE__*/React__default['default'].createElement(CircularProgress__default['default'], null) : /*#__PURE__*/React__default['default'].createElement("div", {
      id: "".concat(id, "NoRecodsFound")
    }, doNotTranslate ? "No records found" : translation("NoRecordsAvailable")))), !hidePagination && /*#__PURE__*/React__default['default'].createElement(CustomGridPagination, {
      labelRowsPerPage: labelRowsPerPage,
      rowsPerPageOptions: rowsPerPageOptions,
      isAllPaginationSelected: isAllPaginationSelected,
      component: "div",
      rowsLength: rows.length,
      rowsPerPage: rowsPerPage,
      page: page,
      searchText: searchText,
      initialRowData: initialRowData,
      handleChangePage: handleChangePage,
      handleChangeRowsPerPage: handleChangeRowsPerPage,
      doNotTranslate: doNotTranslate
    }))));
  }

  var ExcelFile = ReactExport__default['default'].ExcelFile;
  var ExcelSheet = ReactExport__default['default'].ExcelFile.ExcelSheet;
  var ExcelColumn = ReactExport__default['default'].ExcelFile.ExcelColumn;

  var CustomGridExcelDownload = function CustomGridExcelDownload(props) {
    var rows = props.rows,
        headCells = props.headCells,
        _props$filename = props.filename,
        filename = _props$filename === void 0 ? 'Report.xlsx' : _props$filename,
        excelSheetName = props.excelSheetName,
        _props$buttonElement = props.buttonElement,
        buttonElement = _props$buttonElement === void 0 ? null : _props$buttonElement,
        config = props.config;
    return /*#__PURE__*/React__default['default'].createElement(ExcelFile, {
      filename: filename,
      element: buttonElement || /*#__PURE__*/React__default['default'].createElement(Button__default['default'], {
        variant: "contained"
      }, "Default")
    }, /*#__PURE__*/React__default['default'].createElement(ExcelSheet, {
      data: rows,
      name: excelSheetName || filename
    }, headCells.map(function (head) {
      var configItem = config[head.name] || {};
      var lookUpKey = configItem.lookUpKey || head.name;
      return /*#__PURE__*/React__default['default'].createElement(ExcelColumn, {
        label: head.name,
        value: lookUpKey
      });
    })));
  };

  function CustomDropdown(props) {
    var node = React.useRef();

    var _React$useState = React__default['default'].useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        open = _React$useState2[0],
        setOpen = _React$useState2[1];

    function onDropBtnClick() {
      props.onDropBtnClick(open, props.conceptTemplateType);
      setOpen(!open);
    }

    function onClickSaveTagPopUp() {
      props.openSaveTagTemplate(props.conceptTemplateType);
    }

    function editTagTemplate(item) {
      props.editTagTemplate(item);
      setOpen(!open);
    }

    function deleteTagTemplate(item) {
      props.deleteTagTemplate(item, "delete");
      setOpen(!open);
    }

    function onClickOfDropdownMenu(templateData) {
      var unitValue;

      if (props.UnitSystem === "Metric") {
        unitValue = "SI";
      } else {
        unitValue = "IP";
      }

      props.onItemClick(templateData, unitValue, props.conceptTemplateType);
      setOpen(!open);
    }

    function accordianId() {
      var getAccordianID = props.TemplateNames && props.TemplateNames.filter(function (item) {
        return item.AccordianID === props.conceptTemplateType;
      });
      var Valid = props.TemplateNames && props.TemplateNames.length && getAccordianID.length || !(props.TemplateNames && props.TemplateNames.length);
      return Valid;
    }

    React.useEffect(function () {
      document.addEventListener("mousedown", handleClick);
      return function () {
        document.removeEventListener("mousedown", handleClick);
      };
    }, []);

    var handleClick = function handleClick(e) {
      if (node.current.contains(e.target)) {
        return;
      }

      setOpen(false);
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: "SaveTagTemplateBtn",
      className: props.conceptTemplate ? "wbtnDropdown conceptTemplate" : "wbtnDropdown",
      ref: node
    }, /*#__PURE__*/React__default['default'].createElement("button", {
      className: "Wbtn",
      onClick: onClickSaveTagPopUp
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faSave,
      className: "faCusLeft"
    }), props.HeadingName), /*#__PURE__*/React__default['default'].createElement("button", {
      className: "Wbtn GroupBtn",
      onClick: onDropBtnClick
    }, props.dropDownName, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faSortDown
    })), open ? /*#__PURE__*/React__default['default'].createElement("ul", {
      className: "dropdownBox"
    }, accordianId() && props.TemplateNames && props.tagTemplates ? props.tagTemplates.map(function (item) {
      return /*#__PURE__*/React__default['default'].createElement("li", {
        key: workflowuiGlobalfunctions.guid()
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        onClick: function onClick() {
          return onClickOfDropdownMenu(item);
        }
      }, " ", item.TagTemplateName || item.TemplateName || item.Attributes.Description, " "), !item.defaultValues && /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "ActionLink",
        id: "TagTemplateEditlink",
        "data-action": "TagTemplateEdit",
        onClick: function onClick() {
          return editTagTemplate(item);
        }
      }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "columncolor",
        icon: freeSolidSvgIcons.faEdit
      })), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "ActionLink",
        id: "TagTemplateDeletelink",
        "data-action": "TagTemplatetDelete",
        onClick: function onClick() {
          return deleteTagTemplate(item);
        }
      }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "columncolor",
        icon: freeSolidSvgIcons.faTrashAlt
      }))));
    }) : "Loading...") : null);
  }

  var css_248z$c = ".customLoad {\r\n  z-index: 99999999 !important;\r\n}\r\n.customLoad.k-overlay {\r\n  opacity: 0.6;\r\n}\r\n.customLoad .k-dialog {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  background: none;\r\n}\r\n.customLoad .k-dialog P {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: white;\r\n}";
  styleInject(css_248z$c);

  function _templateObject$2() {
    var data = _taggedTemplateLiteral(["\n    margin: auto;\n"]);

    _templateObject$2 = function _templateObject() {
      return data;
    };

    return data;
  }
  var override$2 = core.css(_templateObject$2());

  function CustomLoader(props) {
    var showLoaderImage = props.showLoaderImage,
        loadertext = props.loadertext,
        visible = props.visible; // to-do: remove hash loader and keep new loader

    return visible ? /*#__PURE__*/React__default['default'].createElement(kendoReactDialogs.Dialog, {
      className: "customLoad"
    }, /*#__PURE__*/React__default['default'].createElement("p", null, showLoaderImage && /*#__PURE__*/React__default['default'].createElement(reactSpinners.HashLoader, {
      css: override$2,
      sizeUnit: "px",
      size: 25,
      color: 'ffffff',
      loading: true
    }), loadertext && /*#__PURE__*/React__default['default'].createElement("b", null, /*#__PURE__*/React__default['default'].createElement("font", {
      size: "6"
    }, loadertext)))) : null;
  }
  var CustomLoader$1 = /*#__PURE__*/React__default['default'].memo(CustomLoader);

  var CustomNotification = /*#__PURE__*/function (_React$Component) {
    _inherits(CustomNotification, _React$Component);

    var _super = _createSuper(CustomNotification);

    function CustomNotification(props) {
      var _this;

      _classCallCheck(this, CustomNotification);

      _this = _super.call(this, props);
      _this.state = {
        visible: true
      };
      _this.onclose = _this.onclose.bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(CustomNotification, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this.setState({
          visible: true
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.setState({
          visible: true
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.changeStatus && this.props.changeStatus(false, "", "");
      }
    }, {
      key: "onclose",
      value: function onclose() {
        this.setState({
          visible: false
        });
        this.props.changeStatus && this.props.changeStatus(false, "", "");
      }
    }, {
      key: "styles",
      value: function styles() {
        return {
          cursor: "pointer",
          fontSize: "26px"
        };
      }
    }, {
      key: "render",
      value: function render() {
        var notificationClass;
        var iconType;

        switch (this.props.statusType.toLowerCase()) {
          case "error":
            notificationClass = "ErrorNotification";
            iconType = "k-i-x-circle";
            break;

          case "warning":
            notificationClass = "WarningNotification";
            iconType = "k-i-warning";
            break;

          case "info":
            notificationClass = "InfoNotification";
            iconType = "k-i-information";
            break;

          default:
            notificationClass = "SuccessNotification";
            iconType = "k-i-check-circle";
            break;
        }

        return this.state.visible ? /*#__PURE__*/React__default['default'].createElement("div", {
          id: notificationClass,
          className: "Notification ".concat(notificationClass)
        }, /*#__PURE__*/React__default['default'].createElement("span", {
          className: "k-icon k-icon-notification ".concat(iconType, " NotificationIcon")
        }), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "NotificationDescription"
        }, this.props.descriptionId), /*#__PURE__*/React__default['default'].createElement("span", {
          style: this.styles()
        }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
          icon: freeRegularSvgIcons.faWindowClose,
          onClick: this.onclose
        }))) : '';
      }
    }]);

    return CustomNotification;
  }(React__default['default'].Component);

  var css_248z$d = ".App-Breadcrumbs ol li a {\r\n    text-decoration: none;\r\n    color: rgb(21, 44, 115);\r\n}\r\n.App-Breadcrumbs ol li a:hover {\r\n        text-decoration: underline;\r\n        color: #2041ac;\r\n    }";
  styleInject(css_248z$d);

  var NavigationBar = function NavigationBar(props) {
    return /*#__PURE__*/React__default['default'].createElement(core$1.Breadcrumbs, {
      className: "App-Breadcrumbs"
    }, /*#__PURE__*/React__default['default'].createElement(reactRouterDom.Link, {
      color: "inherit",
      to: "/"
    }, props.navigationText), props.children);
  };

  var css_248z$e = ".PanelSection {\r\n    width: 100%;\r\n    margin-bottom: 2px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    flex-direction: column;\r\n    user-select: none;\r\n   -webkit-user-select: none;\r\n   -khtml-user-select: none;\r\n   -moz-user-select: none;\r\n   -ms-user-select: none;\r\n}\r\n.PanelSection .SubHeader {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 35px;\r\n    background-color: #E5E5E5;\r\n    border: 1px solid #E5E5E5;\r\n    box-sizing: border-box;\r\n}\r\n.PanelSection .SubHeaderTitle {\r\n    width: 96%;\r\n    font-size: 1em;\r\n    text-align: left;\r\n    line-height: 35px;\r\n    margin: 0 0 0 20px;\r\n    color: #696969;\r\n}\r\n.PanelSection .caret {\r\n    margin: 13px 7px;\r\n    border-top: 5px solid #696969;\r\n}\r\n.PanelSection .caret-reversed {\r\n    border-top: 5px solid transparent;\r\n    border-bottom: 5px solid #696969;\r\n    margin-top: 10px;\r\n}\r\n\r\n.PanelSection .SubContainer {\r\n    border: 1px solid #e1e1e1;\r\n    width: 100%;\r\n    padding: 15px;\r\n    box-sizing: border-box;\r\n}";
  styleInject(css_248z$e);

  function PanelGroup(props) {
    var _useState = React.useState(props.open ? props.open : false),
        _useState2 = _slicedToArray(_useState, 2),
        open = _useState2[0],
        setOpen = _useState2[1];

    React.useEffect(function () {
      setOpen(props.open);
    }, [props.open]);

    function togglePanel(e) {
      if (e.target.id === "PanelSection" || e.target.id === "SubHeaderTitle" || e.target.id === "SubHeader" || e.target.id === "PanelCaret") {
        props.togglePanel ? props.togglePanel() : setOpen(!open);
      }
    }

    var ValidProp = props.RulesJSON && workflowuiGlobalfunctions.GetProp(props.validStateCheckProp, props.RulesJSON);
    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: "PanelSection",
      className: "PanelSection",
      onClick: function onClick(e) {
        return togglePanel(e);
      }
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      id: "SubHeader",
      className: "SubHeader"
    }, /*#__PURE__*/React__default['default'].createElement("h1", {
      id: "SubHeaderTitle",
      className: "SubHeaderTitle"
    }, props.panelName, (ValidProp && !workflowuiGlobalfunctions.getBooleanValue(ValidProp.Value) || workflowuiGlobalfunctions.isRelaxed(props.RulesJSON, props.relaxedPropName)) && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "StepNotValidText NaApp"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: freeSolidSvgIcons.faExclamationCircle,
      size: "lg",
      color: "#CC0000"
    }))), /*#__PURE__*/React__default['default'].createElement("span", {
      id: "PanelCaret",
      className: open ? "caret caret-reversed" : "caret"
    })), open ? /*#__PURE__*/React__default['default'].createElement("div", {
      className: "SubContainer"
    }, props.children) : '');
  }

  function RenameTemplatePopUp(props) {
    var _React$useState = React__default['default'].useState(),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        tagName = _React$useState2[0],
        setTagName = _React$useState2[1];

    var _React$useState3 = React__default['default'].useState(),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        tagValidationError = _React$useState4[0],
        setTagValidationError = _React$useState4[1];

    var tagNameRef = React__default['default'].useRef();

    function onToggleEditDialouge() {
      setTagName("");
      setTagValidationError("");
      props.onToggleEditDialouge(!props.opendialouge);
    }

    function handleChange(e) {
      var value = e.target.value;
      setTagName(value);
      var validations = {
        regExp: /^[A-Za-z0-9 _]*[A-Za-z0-9][A-Za-z0-9 _.]*$/,
        maxLength: 50
      };
      var validationMessages = {
        nameRequired: props.tagNameRequiredText,
        notAllowedCharacters: props.notAllowedCharactersText,
        maxLengthError: props.maxLengthError
      };
      var error = workflowuiGlobalfunctions.validateFormFields(value, props.customValidations || validations, validationMessages);
      if (error !== tagValidationError) setTagValidationError(error);
    }

    function onUpdateTagTemplate(e) {
      e.preventDefault();

      if (tagName) {
        var isduplicate = false;

        if (props.allTemplates && tagName !== props.item.TemplateName) {
          isduplicate = workflowuiGlobalfunctions.isDuplicateTagTemplate(props.allTemplates, tagName);
        }

        if (isduplicate) {
          setTagValidationError(props.duplicateTemplateNameText);
        } else {
          props.onUpdateTagTemplate(e, tagName);
          setTagName("");
        }
      } else {
        setTagValidationError(props.tagNameRequiredText);
        tagNameRef.current.focus();
      }
    }

    return /*#__PURE__*/React__default['default'].createElement("div", null, props.opendialouge && /*#__PURE__*/React__default['default'].createElement(kendoReactDialogs.Dialog, {
      title: props.title,
      onClose: onToggleEditDialouge,
      className: "editTagTemplate-dialog"
    }, /*#__PURE__*/React__default['default'].createElement("form", {
      className: ""
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: ""
    }, /*#__PURE__*/React__default['default'].createElement("label", {
      className: ""
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "editTagTemplate-dialog-dimensions"
    }, /*#__PURE__*/React__default['default'].createElement("span", null, props.templateNameText)), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "message textBoxwidth"
    }, /*#__PURE__*/React__default['default'].createElement("input", {
      className: "k-textbox form-control",
      name: "tagName",
      value: tagName,
      onChange: handleChange,
      ref: tagNameRef
    }), /*#__PURE__*/React__default['default'].createElement("span", {
      className: "errorMsg"
    }, tagValidationError))), /*#__PURE__*/React__default['default'].createElement("label", {
      className: ""
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "editTagTemplate-dialog-dimensions"
    }, /*#__PURE__*/React__default['default'].createElement("span", null, props.existingTemplateText)), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "message textBoxwidth"
    }, /*#__PURE__*/React__default['default'].createElement("input", {
      className: "k-textbox form-control",
      name: "tagName",
      value: props.item && props.item.TemplateName,
      onChange: handleChange,
      disabled: true
    })))), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "dialog-but"
    }, /*#__PURE__*/React__default['default'].createElement(Button, {
      icon: freeSolidSvgIcons.faTimes,
      name: props.cancelText,
      styles: "eButtonPrimary",
      style: {
        backgroundColor: "#152c73",
        color: "white"
      },
      onClick: onToggleEditDialouge,
      id: "Cancel_Rename"
    }), /*#__PURE__*/React__default['default'].createElement(Button, {
      icon: freeSolidSvgIcons.faSave,
      name: props.renameTemplateText,
      styles: "eButtonPrimary",
      style: {
        backgroundColor: "#152c73",
        color: "white"
      },
      onClick: function onClick(e) {
        return onUpdateTagTemplate(e);
      },
      id: "Rename_TagTemplate"
    })))));
  }

  function TemplatePopUp(props) {
    function onToggleDeleteDialouge(flag) {
      props.onToggleDeleteDialouge(flag);
    }

    function deleteTagTemplate(e) {
      e.preventDefault();

      if (props.tagTemplateDelete) {
        props.deleteItem();
      } else {
        props.deleteTemplate(props.item);
      }

      props.onToggleDeleteDialouge(false);
    }

    return /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(kendoReactDialogs.Dialog, {
      title: props.popUpHeading,
      onClose: function onClose() {
        return onToggleDeleteDialouge(false);
      },
      className: "editTagTemplate-dialog"
    }, /*#__PURE__*/React__default['default'].createElement("form", null, /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement("label", null, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "confirmation_delete"
    }, /*#__PURE__*/React__default['default'].createElement("span", null, props.confirmText)))), /*#__PURE__*/React__default['default'].createElement("div", {
      className: "dialog-but"
    }, /*#__PURE__*/React__default['default'].createElement(Button, {
      name: props.okText,
      styles: "eButtonPrimary",
      style: {
        backgroundColor: "#152c73",
        color: "white"
      },
      onClick: function onClick(e) {
        return deleteTagTemplate(e);
      },
      id: "Delete_template"
    }), /*#__PURE__*/React__default['default'].createElement(Button, {
      name: props.noText,
      styles: "eButtonPrimary",
      style: {
        backgroundColor: "#152c73",
        color: "white"
      },
      onClick: function onClick() {
        return onToggleDeleteDialouge(false);
      },
      id: "Cancel_Delete_Template"
    })))));
  }

  var mapStateToProps = function mapStateToProps(state) {
    return {
      TagTemplates: state.getTagTemplates,
      openDialouge: state.TagTemplateOpenDialouge
    };
  };

  var TemplatePopUp$1 = reactRedux.connect(mapStateToProps, {})(TemplatePopUp);

  var useStyles$1 = core$1.makeStyles({
    labelWithInput: {
      fontSize: "13px",
      marginLeft: "5px"
    }
  });

  function LabelWithInput(props) {
    var _useStyles = useStyles$1(),
        labelWithInput = _useStyles.labelWithInput;

    var type = props.type,
        name = props.name,
        controlId = props.controlId,
        checked = props.checked,
        labelText = props.labelText,
        OnControlChange = props.OnControlChange,
        value = props.value,
        _props$disabled = props.disabled,
        disabled = _props$disabled === void 0 ? false : _props$disabled,
        constant = props.constant;

    var onChangeHandler = function onChangeHandler(e) {
      var checked = e.target.checked;
      OnControlChange && OnControlChange(e.target.type === 'radio' ? e.target.value : checked, constant);
    };

    return /*#__PURE__*/React__default['default'].createElement("label", null, /*#__PURE__*/React__default['default'].createElement("input", {
      type: type,
      name: name,
      id: controlId,
      onChange: onChangeHandler,
      checked: checked,
      value: value,
      disabled: disabled
    }), /*#__PURE__*/React__default['default'].createElement("span", {
      className: labelWithInput
    }, labelText));
  }

  var css_248z$f = ".js-report {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.js-report .report-back {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 10000;\r\n    overflow-y: scroll;\r\n}\r\n.js-report .report-popup {\r\n    width: 21cm;\r\n    height: 29.7cm;\r\n    background-color: #fff;\r\n    z-index: 1400;\r\n    margin: 70px auto;\r\n    box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\r\n}\r\n.js-report .report-toolbar-container {\r\n    width: 21cm;\r\n    margin: auto;\r\n}\r\n.js-report .report-top-action-container {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 60px;\r\n    backdrop-filter: blur(3px);\r\n    background-color: #363636ba;\r\n    box-shadow: 0px 0px 7px #212121;\r\n    display: flex;\r\n    justify-content: center;\r\n    cursor: default;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    z-index: 1;\r\n}\r\n.js-report .report-top-action-container-title {\r\n    color: white;\r\n    position: fixed;\r\n    left: 50px;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 20px;\r\n}\r\n.js-report .report-top-action {\r\n    width: 10cm;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.js-report .report-top-action-icons {\r\n    height: 38px !important;\r\n    width: 38px !important;\r\n    transition: all 0.1s ease-in-out;\r\n}\r\n.js-report .report-top-action-icons-disabled {\r\n    opacity: 0.5;\r\n    cursor: default !important;\r\n    height: 38px !important;\r\n    width: 38px !important;\r\n}\r\n.js-report .report-top-action-icons:hover {\r\n    cursor: pointer;\r\n    transform: scale(1.3);\r\n}\r\n.js-report .report-top-action-page-index-container {\r\n    color: white;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 66%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 60px;\r\n}\r\n.js-report .report-top-action-page-index-value {\r\n    font-size: 20px;\r\n}\r\n.js-report .report-top-actions-download-container {\r\n    height: 48%;\r\n    align-content: center;\r\n    flex-direction: row;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n}\r\n.js-report .report-top-action-download-icons-container {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.js-report .report-top-actions-container-title {\r\n    color: white;\r\n    font-size: 11px;\r\n}\r\n";
  styleInject(css_248z$f);

  var JSReportContainer = function JSReportContainer(props) {
    var intl = props.intl,
        config = props.config,
        title = props.title,
        open = props.open;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray(_useState, 2),
        reportCurrentPreviewIndex = _useState2[0],
        setReportCurrentPreviewIndex = _useState2[1];

    var _useState3 = React.useState([]),
        _useState4 = _slicedToArray(_useState3, 2),
        pageList = _useState4[0],
        setPageList = _useState4[1];

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray(_useState5, 2),
        isLoading = _useState6[0],
        setLoading = _useState6[1];

    var _useState7 = React.useState(0),
        _useState8 = _slicedToArray(_useState7, 2),
        scrollBarWidth = _useState8[0],
        setScrollBarWidth = _useState8[1];

    var clickRef = React.useRef();
    var store = reactRedux.useStore();
    React.useEffect(function () {
      document.addEventListener('mousedown', handleClick);
      setScrollBarWidth(getScrollbarWidth());
      return function () {
        document.removeEventListener('mousedown', handleClick);
      };
    });

    var getScrollbarWidth = function getScrollbarWidth() {
      var outer = document.createElement('div');
      Object.assign(outer.style, {
        visibility: 'hidden',
        overflow: 'scroll',
        msOverflowStyle: 'scrollbar'
      });
      document.body.appendChild(outer);
      var inner = document.createElement('div');
      outer.appendChild(inner);
      var scrollBarWidth = outer.offsetWidth - inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return scrollBarWidth;
    };

    var handleClick = function handleClick(e) {
      var onScrollbar = document.documentElement.clientWidth - scrollBarWidth <= e.clientX;

      if (clickRef.current && !clickRef.current.contains(e.target) && !onScrollbar) {
        setPageList([]);
        setReportCurrentPreviewIndex(0);
        props.onClose();
      }
    };

    var downloadPDF = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var RootEl, reportEl, reportDoc, jsReportReponse;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                RootEl = function RootEl(props) {
                  return store ? /*#__PURE__*/React__default['default'].createElement(reactRedux.Provider, {
                    store: store
                  }, /*#__PURE__*/React__default['default'].createElement(reactIntl.IntlProvider, {
                    locale: intl.locale,
                    messages: intl.messages
                  }, props.children)) : /*#__PURE__*/React__default['default'].createElement(reactIntl.IntlProvider, {
                    locale: intl.locale,
                    messages: intl.messages
                  }, props.children);
                };

                setLoading(true);
                _context.prev = 2;
                reportEl = /*#__PURE__*/React__default['default'].createElement(RootEl, null, /*#__PURE__*/React__default['default'].createElement("html", {
                  id: "pdf-download-root"
                }, /*#__PURE__*/React__default['default'].createElement("head", null, /*#__PURE__*/React__default['default'].createElement("meta", {
                  httpEquiv: "Content-Type",
                  content: "text/html; charset=UTF-8"
                }), config.styles.files.map(function (file, i) {
                  return /*#__PURE__*/React__default['default'].createElement("link", {
                    key: i,
                    rel: "stylesheet",
                    type: "text/css",
                    href: "".concat(config.styles.url).concat(file)
                  });
                })), /*#__PURE__*/React__default['default'].createElement("body", null, pageList.map(function (elem, i) {
                  return /*#__PURE__*/React__default['default'].createElement("div", {
                    key: i,
                    className: "page"
                  }, elem);
                }))));
                reportDoc = new Document();
                ReactDOM__default['default'].render(reportEl, reportDoc);
                _context.next = 8;
                return fetch("".concat(props.jsReportApi, "api/report"), {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json;charset=UTF-8',
                    'Access-Control-Allow-Methods': 'GET, POST',
                    Authorization: "Bearer ".concat(localStorage.getItem('msal.idtoken')),
                    Cookie: 'render-complete=true'
                  },
                  body: JSON.stringify({
                    template: {
                      shortid: 'l1DbOPsN5',
                      content: reportDoc.documentElement.outerHTML,
                      recipe: 'chrome-pdf',
                      engine: 'handlebars',
                      chrome: {
                        width: '210mm',
                        height: '297mm'
                      }
                    }
                  })
                });

              case 8:
                jsReportReponse = _context.sent;
                _context.t0 = FileSaver__default['default'];
                _context.next = 12;
                return jsReportReponse.blob();

              case 12:
                _context.t1 = _context.sent;
                _context.t2 = "".concat(config.fileName, ".pdf");

                _context.t0.saveAs.call(_context.t0, _context.t1, _context.t2);

                _context.next = 20;
                break;

              case 17:
                _context.prev = 17;
                _context.t3 = _context["catch"](2);
                console.error(_context.t3);

              case 20:
                setLoading(false);

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 17]]);
      }));

      return function downloadPDF() {
        return _ref.apply(this, arguments);
      };
    }();

    var downloadWord = function downloadWord() {// To develop
    };

    if (open) {
      return /*#__PURE__*/React__default['default'].createElement("div", {
        className: "js-report"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-back"
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-toolbar-container",
        ref: clickRef
      }, /*#__PURE__*/React__default['default'].createElement(Slide__default['default'], {
        "in": true
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-top-action-container"
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "report-top-action-container-title"
      }, title), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-top-action"
      }, reportCurrentPreviewIndex > 0 ? /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons",
        icon: freeSolidSvgIcons.faChevronLeft,
        color: "#FFFFFF",
        onClick: function onClick() {
          setReportCurrentPreviewIndex(reportCurrentPreviewIndex - 1);
        }
      }) : /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons-disabled",
        icon: freeSolidSvgIcons.faChevronLeft,
        color: "#FFFFFF"
      }), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "report-top-action-page-index-container"
      }, /*#__PURE__*/React__default['default'].createElement("span", {
        className: "report-top-actions-container-title"
      }, "Page"), /*#__PURE__*/React__default['default'].createElement("span", {
        className: "report-top-action-page-index-value"
      }, /*#__PURE__*/React__default['default'].createElement("b", null, reportCurrentPreviewIndex + 1, " "), "/ ", pageList.length)), reportCurrentPreviewIndex >= 0 && reportCurrentPreviewIndex < pageList.length - 1 ? /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons",
        icon: freeSolidSvgIcons.faChevronRight,
        color: "#FFFFFF",
        onClick: function onClick() {
          setReportCurrentPreviewIndex(reportCurrentPreviewIndex + 1);
        }
      }) : /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons-disabled",
        icon: freeSolidSvgIcons.faChevronRight,
        color: "#FFFFFF"
      }), /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-top-actions-download-container"
      }, isLoading ? /*#__PURE__*/React__default['default'].createElement(ClipLoader__default['default'], {
        sizeUnit: 'px',
        size: 10,
        color: "#FFFFFF",
        loading: isLoading
      }) : /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-top-action-download-icons-container"
      }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons",
        icon: freeSolidSvgIcons.faFilePdf,
        color: "#FFFFFF",
        onClick: downloadPDF
      }), /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
        className: "report-top-action-icons",
        icon: freeSolidSvgIcons.faFileWord,
        color: "#FFFFFF",
        onClick: downloadWord
      })))))), /*#__PURE__*/React__default['default'].createElement(Grow__default['default'], {
        "in": true
      }, /*#__PURE__*/React__default['default'].createElement("div", {
        className: "report-popup"
      }, /*#__PURE__*/React.cloneElement(props.children, {
        reportCurrentPreviewIndex: reportCurrentPreviewIndex,
        updateList: function updateList(data) {
          return setPageList(data);
        }
      }))))));
    } else return null;
  };

  var JSReportContainer$1 = /*#__PURE__*/React.memo(JSReportContainer);

  exports.AddProject = AddProject$1;
  exports.AutoComplete = AutoComplete$1;
  exports.Button = Button;
  exports.Cell = Cell;
  exports.CheckboxWithDropDown = CheckboxWithDropDown;
  exports.Col = Col;
  exports.ConfigDrivenUrlField = ConfigDrivenUrlField;
  exports.ConfirmModal = ConfirmModal;
  exports.CustomDropdown = CustomDropdown;
  exports.CustomGrid = CustomGrid;
  exports.CustomGridBody = CustomGridBody;
  exports.CustomGridExcelDownload = CustomGridExcelDownload;
  exports.CustomGridHead = CustomGridHead;
  exports.CustomGridPagination = CustomGridPagination;
  exports.CustomGridSearch = CustomGridSearch$1;
  exports.CustomLoader = CustomLoader$1;
  exports.CustomNotification = CustomNotification;
  exports.DynamicContainer = DynamicContainer;
  exports.DynamicContainerWithHeader = DynamicContainerWithLabel;
  exports.DynamicIcon = DynamicIcon;
  exports.DynamicLabel = DynamicLabel;
  exports.DynamicRow = DynamicRow;
  exports.FormBuilderField = FormBuilderField;
  exports.HorizontalCheckboxGroupWithImage = HorizontalCheckboxGroupWithImage;
  exports.HorizontalRadioGroupWithImage = HorizontalRadioGroupWithImage;
  exports.ImageWithLabelCheckboxGroup = ImageWithLabelCheckboxGroup;
  exports.JSReportContainer = JSReportContainer$1;
  exports.LabelWithInput = LabelWithInput;
  exports.MessageTextArea = MessageTextArea;
  exports.NavigationBar = NavigationBar;
  exports.OptionControl = OptionControl$1;
  exports.PanelGroup = PanelGroup;
  exports.ProjectTagSelection = ProjectTagSelection$1;
  exports.RenameTemplatePopUp = RenameTemplatePopUp;
  exports.SaveTag = saveTag;
  exports.SearchDropdown = Searchdropdown;
  exports.SimpleCheckbox = SimpleCheckbox;
  exports.SimpleCombobox = SimpleCombobox$1;
  exports.SimpleHorizontalTabs = SimpleHorizontalTabs;
  exports.SimpleImage = SimpleImage;
  exports.SimpleLabelWithCurrency = SimpleLabelWithCurrency;
  exports.SimpleLabelWithImage = SimpleLabelWithImage;
  exports.SimpleRadioButtonGroup = SimpleRadioButtonGroup;
  exports.SimpleRadioButtonWithCurrencyGroup = SimpleRadioButtonWithCurrencyGroup;
  exports.SimpleRuleButton = SimpleRuleButton;
  exports.SimpleTagDescription = SimpleTagDescription;
  exports.TableColumn = TableColumn;
  exports.TableWithQuestionControl = TableWithQuestionControl;
  exports.TabsBuilder = TabsBuilder$1;
  exports.TemplatePopUp = TemplatePopUp$1;
  exports.TextBoxWithLabel = TextBoxWithLabel;
  exports.translation = translation;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
